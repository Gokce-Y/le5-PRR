---
title: "Stock Market Analysis"
subtitle: "Risk, Return, and Portfolio Insights Using CAPM"
author: 
  - name: "Yaren Demir"
  - name: "Ivan Halka"
format:
  html:
    toc: true
    toc-depth: 3
    toc-float: true
    number-sections: true
    theme: flatly        
    code-fold: true       
    code-tools: true    
    df-print: paged      
  pdf:
    toc: true
    toc-depth: 3
    number-sections: true
    fig-caption: true
    keep-tex: true        
editor: visual
fontsize: 11pt
mainfont: "Palatino"
geometry: margin=1in
---

```{r message=FALSE, warning=FALSE, include=FALSE}
library(quantmod)
library(PerformanceAnalytics)
library(dplyr)
library(lubridate)
library(plotly)
library(corrplot)
library(tidyr)
```


# Introduction

Let’s be honest—when it comes to investing, most of us have asked ourselves:

::: {.callout-question}
**Should I go all in on a single high-performing stock, or play it safe by spreading the risk?**
:::

Or maybe that question hasn’t crossed your mind yet—because you’re just starting out.

In this article, we will answer key finance-related questions using data from Apple (AAPL), Tesla (TSLA), and Microsoft (MSFT).

![](images/tma.webp)


## Summary of Questions and Analysis Methods

We’ll uncover trends, visualize performance, and break down how to assess stock risk using historical data.

Here’s what we’re exploring and how we approached solving each question:

<ul style="line-height:1.8; font-size:1.05em;">
  <li>
    <strong>How has the stock price changed over time?</strong><br>
    Analyzed using a line chart with Plotly (adjusted closing prices).
  </li>
  <li>
    <strong>How do we calculate volatility?</strong><br>
    Calculated as the standard deviation of daily returns.
  </li>
  <li>
    <strong>What is the average daily return of the stock?</strong><br>
    Computed using the arithmetic mean of daily returns.
  </li>
  <li>
    <strong>How do you calculate the expected annual return for an asset?</strong><br>
    Estimated using the CAPM (Capital Asset Pricing Model) via linear regression on excess returns.
  </li>
  <li>
    <strong>What is the correlation between different stocks?</strong><br>
    Assessed using a Pearson correlation matrix with visualization via <code>corrplot</code>.
  </li>
  <li>
    <strong>How much value is at risk when investing in a stock?</strong><br>
    Visualized using a scatter plot of mean return versus standard deviation (risk-return profile).
  </li>
  <li>
    <strong>How can we build a diversified stock portfolio?</strong><br>
    Based on diversification logic derived from correlation differences between assets.
  </li>
</ul>

<div style="background-color:#f0f8ff; border-left:4px solid #64b5f6; padding:10px 16px; margin: 20px 0; font-size:1em; color:#333;">
  <strong>We answer all of these questions using RStudio and real financial data.</strong>
</div>


## Getting the Data from Yahoo Finance

First we have to get the data. Yahoo Finance is a rich resource of financial market data and tools to find compelling investments.

In R, we use the **`quantmod`** package to access Yahoo Finance data. It does not require any credentials or authorization, so we can hop right into getting our data.

<div style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;">
In the code below, we calculate the excess return by subtracting the daily risk-free rate from the asset’s return.
</div>

As we mentioned we choose 3 stocks (AAPL, MSFT, TSLA). Later we will use GSPC, so ignore it for the moment.

```{r}
symbols <- c("AAPL", "MSFT", "TSLA", "^GSPC")
getSymbols(symbols, src = "yahoo", from = "2019-01-01", to = "2024-12-31")
```

Now that we have the data we can start.



<div style="background-color:#fce4ec; border-left:4px solid #f06292; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#880e4f;">
We use adjusted closing prices because they account for stock splits, dividends, and other corporate actions, giving a more accurate view of the stock's true return over time.
</div>

<div style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;">
This code extracts the date and adjusted closing price for Apple, Tesla, and Microsoft, then merges them into one data frame by date.
</div>


```{r}
# Extract date and adjusted price for Stocks

aapl_df <- data.frame(date = index(AAPL), coredata(AAPL)) |>
  select(date, AAPL.Adjusted)

tsla_df <- data.frame(date = index(TSLA), coredata(TSLA)) |>
  select(date, TSLA.Adjusted)

msft_df <- data.frame(date = index(MSFT), coredata(MSFT)) |>
  select(date, MSFT.Adjusted)

```


# How has the stock price changed over time?

One of the first questions in the mind of any new investor in the stock market is that why do stock prices change every second?

Well, there’s no straightforward answer to that question.
The price of a stock is influenced by many different forces—each affecting its direction and magnitude. While it’s possible to understand some of these factors, trying to predict the market often proves to be more misleading than helpful.

Instead of predicting, a more effective approach is to observe how prices have moved in the past.

There are many ways to visualize change over time, but the most common is a line chart.

<div style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;">
In the code below, we create a chart using the Plotly library, which is great for this purpose because it allows you to zoom in, hover over points, and explore the data interactively.
</div>



```{r}
# Define colors for each ticker
colors <- c(AAPL = "green", MSFT = "blue", TSLA = "red")

# Define the function to plot adjusted closing price
create_stock_plot <- function(data, y_col, title_text, line_color) {
  plot_ly(
    data = data,
    x = ~date,
    y = as.formula(paste0("~", y_col)),
    type = 'scatter',
    mode = 'lines',
    name = title_text,
    line = list(color = line_color)
  ) %>%
    layout(
      title = paste0(title_text, " – Adjusted Closing Price"),
      xaxis = list(title = "Date"),
      yaxis = list(title = "Adjusted Close Price (USD)"),
      showlegend = FALSE
    )
}

# Wrapper function to create adjusted price plots for multiple stocks
create_all_stock_plots <- function(data_list, colors) {
  mapply(function(data, ticker, color) {
    create_stock_plot(data, paste0(ticker, ".Adjusted"), paste0(ticker, " Inc. (" , ticker, ")"), color)
  },
  data = data_list,
  ticker = names(colors),
  color = colors,
  SIMPLIFY = FALSE)
}

# List of stock data frames
data_list <- list(AAPL = aapl_df, MSFT = msft_df, TSLA = tsla_df)

plots_Adj <- create_all_stock_plots(data_list, colors)

# Display plots
plots_Adj[[1]]
plots_Adj[[2]]
plots_Adj[[3]]


```

If you look closely at the y-axis, you’ll notice that Tesla’s adjusted closing price spans a much wider range. This already gives us an early hint that Tesla might be more volatile compared to Apple and Microsoft.

# Which Stock Has the Highest Risk?

## Understanding Volatility

Volatility is a frequently encountered concept in the world of finance and holds great importance for investors. *But what exactly is volatility?* Volatility refers to the degree of fluctuation in the price of a financial asset. In other words, it describes how quickly and significantly the price of an asset changes. When I was a kid I had an opportunity to have lunch with an economist from my country. One of the thing he said :"Volatility is uncertainty". After so many years I consider it still the best one-word explanation.

To analyze a stock’s risk, we don’t just look at its price — we track how much the price changes each day. This is where daily return comes in: calculates the daily return of a stock by taking today's Opening price, dividing it by yesterday's Opening price, and subtracting 1. This shows the percentage change in the stock's value from one day to the next.

## Visualization: Daily Return Over Time


<div style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;">
In the code below, we use the <code>dailyReturn()</code> function from the <code>quantmod</code> package.
</div>


```{r}
# Function to get daily returns from adjusted prices for a list of symbols
get_daily_returns <- function(symbols) {
  lapply(symbols, function(sym) dailyReturn(Ad(get(sym))))
}

# Define stock tickers
tickers <- c("AAPL", "MSFT", "TSLA")

# Get daily return series for each ticker
returns_list <- get_daily_returns(tickers)

# Assign ticker names to the list elements
names(returns_list) <- tickers

```

<div style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;">
In the code below, we use a line chart to visualize and examine the time series behavior of daily returns for the three selected assets.
</div>



```{r}
# Function to plot daily returns for a single stock
plot_daily_return <- function(return_xts, ticker, line_color = "blue") {
  plot_ly() %>%
    add_lines(
      x = ~index(return_xts),             # Dates on x-axis
      y = ~coredata(return_xts),          # Return values on y-axis
      name = ticker,
      line = list(color = line_color)
    ) %>%
    layout(
      title = paste("Daily Return of", ticker),
      xaxis = list(title = "Date"),
      yaxis = list(title = "Daily Return"),
      legend = list(x = 0.1, y = 0.9)
    )
}

# Generate plots for all stocks in returns_list using specified colors
plots_Adj_Daily <- mapply(plot_daily_return, returns_list, names(colors), colors, SIMPLIFY = FALSE)

plots_Adj_Daily[[1]]
plots_Adj_Daily[[2]]
plots_Adj_Daily[[3]]

```

One thing stands out here: Tesla (TSLA) is far more volatile than Apple (AAPL) and Microsoft (MSFT).
While AAPL and MSFT tend to show steady, predictable price movements, TSLA swings much more aggressively from day to day. This kind of behavior points to Tesla being a more speculative and higher-risk stock.

One thing stands out here: Tesla (TSLA) is far more volatile than Apple (AAPL) and Microsoft (MSFT).
While AAPL and MSFT tend to show steady, predictable price movements, TSLA swings much more aggressively from day to day.

At the same time, we can observe periods when all three stocks move in the same direction — either rising or falling together. This suggests that broader market forces, such as economic news or global events, can affect all stocks simultaneously, regardless of their individual characteristics.


## Visualization: Volatility Over Time

To better understand how volatility changes over time, we grouped the daily returns into half-year periods and calculated the standard deviation for each. The chart below shows how the risk level evolved for each stock.

Markets tend to get turbulent during uncertain times — whether it’s due to political unrest, economic shifts, natural disasters, or unexpected company news.
In such periods, stock prices can swing sharply, creating both big risks and big opportunities or losses.

The period from 2019 to 2024 was anything but ordinary.
From the COVID-19 outbreak to the war in Ukraine, rising inflation, and the recent AI-driven stock surge — markets have been shaped by one major event after another.

To keep our analysis clear, we decided to use a simpler method: 
- grouping adjusted daily returns into half-year periods and calculating the standard deviation for each group.

<div style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;">
In the code below, we group daily returns into half-year periods and calculate the average (mean) and risk (standard deviation) for each stock in each period.
</div>






```{r}
# Convert xts object to data frame and add HalfYear column (e.g., "2023 H1")
create_halfyear_df <- function(returns_xts) {
  df <- data.frame(Date = index(returns_xts), coredata(returns_xts))
  df %>%
    mutate(HalfYear = paste0(year(Date), " H", ifelse(month(Date) <= 6, 1, 2)))
}

# Merge daily returns of AAPL, MSFT, and TSLA into one xts object
returns_combined <- merge(returns_list$AAPL, returns_list$MSFT, returns_list$TSLA)
colnames(returns_combined) <- c("AAPL", "MSFT", "TSLA")

# Convert to data frame and add HalfYear labels
returns_df <- create_halfyear_df(returns_combined)

# Group by HalfYear and calculate mean & standard deviation of returns
grouped_data <- returns_df %>%
  group_by(HalfYear) %>%
  summarise(across(c(AAPL, MSFT, TSLA),
                   list(Mean = ~mean(.x, na.rm = TRUE),
                        SD = ~sd(.x, na.rm = TRUE))))

```



<div style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;">
In the code below, we add event labels and lines to highlight key periods.
</div>


<div style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;">
In the code below, we add event labels and lines to highlight key periods.
</div>




```{r}
# Ensure HalfYear is treated as an ordered factor
grouped_data$HalfYear <- factor(grouped_data$HalfYear, levels = grouped_data$HalfYear)

# Define key events to annotate specific half-years
event_labels <- data.frame(
  HalfYear = c("2020 H1", "2021 H1", "2022 H1", "2023 H1"),
  label = c("COVID", "Vaccine", "War", "AI")
)

# Create vertical dashed lines for each event to be added to plotly plots
event_lines <- lapply(event_labels$HalfYear, function(h) {
  list(
    type = "line",
    x0 = h, x1 = h,        # Position line at the HalfYear
    y0 = 0, y1 = 1,        
    xref = "x", yref = "paper",  
    line = list(color = "red", dash = "dash", width = 0.5)
  )
})

```



```{r}
# Create a volatility plot over half-year periods
volatility_plot <- plot_ly(data = grouped_data) %>%
  
  # Add AAPL volatility line
  add_trace(x = ~HalfYear, y = ~AAPL_SD, name = "AAPL", type = 'scatter', mode = 'lines+markers') %>%
  
  # Add MSFT volatility line
  add_trace(x = ~HalfYear, y = ~MSFT_SD, name = "MSFT", type = 'scatter', mode = 'lines+markers') %>%
  
  # Add TSLA volatility line
  add_trace(x = ~HalfYear, y = ~TSLA_SD, name = "TSLA", type = 'scatter', mode = 'lines+markers') %>%
  
  # Add event annotations at the bottom of the plot
  add_annotations(
    data = event_labels,
    x = ~HalfYear,
    y = 0,
    text = ~label,
    showarrow = FALSE,
    yanchor = "bottom",
    font = list(color = "red", size = 10)
  ) %>%
  
  layout(
    title = "6-Month Volatility by Stock with Key Events",
    xaxis = list(title = "Period (Half-Year)", tickangle = -45),
    yaxis = list(title = "Volatility (Standard Deviation)"),
    legend = list(title = list(text = "Stock")),
    shapes = event_lines  # Add vertical dashed event lines
  )

volatility_plot
```


The story told by the graph is pretty straightforward — and honestly, it played out just like we expected.

In early 2020, when COVID-19 hit, volatility shot up across the board. Apple, Microsoft, and Tesla all saw sharp spikes as markets were rattled by global uncertainty.

By early 2021, things started to settle. With vaccine rollouts underway and a clearer path forward, investor confidence slowly returned, and volatility dropped.

Then came early 2022. Russia’s invasion of Ukraine triggered another wave of market turbulence. But just like before, the shock faded, and things gradually stabilized.

Up to that point, the three stocks were moving in sync — reacting to global events in similar ways and eventually finding their footing.

But 2023 broke that pattern.

That’s when the AI boom started gaining serious traction, and Tesla began to break away from the pack. While Apple and Microsoft stayed relatively stable, Tesla’s volatility picked up again.

Sure, Tesla swings harder than the others. But that’s also part of what draws investors in. Bigger risk can mean bigger reward — and for some, that trade-off is worth it.

In the following section, we’ll take a closer look at how each stock actually performed.

# Average daily return of the stock

## Arithmetic Mean Return and Geometric Mean Return

Before we jump into the results, a quick note on how returns are measured.

There are two main ways: arithmetic mean and geometric mean.
The arithmetic mean simply averages the returns — add them up, divide by the number of periods. It’s quick, easy, and great for short-term comparisons.

We’re using the arithmetic mean here because we’re focused on comparing average performance over set time intervals — not modeling long-term compounding.

## Visualization: Average Returns Over Time

In the previous section, we mentioned that risk can also lead to reward.
So after seeing Tesla’s extreme volatility, you might be thinking:

***"Well, with all that risk, I hope the returns are worth it!"***

Let’s find out by grouping adjusted daily returns into half-year periods — using the same method we applied for volatility.



<div style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;">
In the code below, we create a chart that shows how returns changed over time and highlights the impact of key events. <code>plot_ly()</code> makes it interactive and easy to compare stocks.
</div>



```{r}
# Create a line plot showing 6-month average returns
return_plot <- plot_ly(data = grouped_data) %>%

  # Add AAPL average returns
  add_trace(x = ~HalfYear, y = ~AAPL_Mean, name = "AAPL",
            type = 'scatter', mode = 'lines+markers', line = list(color = 'blue')) %>%

  # Add MSFT average returns
  add_trace(x = ~HalfYear, y = ~MSFT_Mean, name = "MSFT",
            type = 'scatter', mode = 'lines+markers', line = list(color = 'orange')) %>%

  # Add TSLA average returns
  add_trace(x = ~HalfYear, y = ~TSLA_Mean, name = "TSLA",
            type = 'scatter', mode = 'lines+markers', line = list(color = 'green')) %>%

  # Add annotations for major market events 
  add_annotations(
    data = event_labels,
    x = ~HalfYear,
    y = 0,
    text = ~label,
    showarrow = FALSE,
    yanchor = "bottom",
    font = list(color = "red", size = 12)
  ) %>%

  # Configure plot layout
  layout(
    title = "6-Month Average Returns by Stock with Key Events",
    xaxis = list(title = "Period (Half-Year)", tickangle = -45), 
    yaxis = list(title = "Average Daily Return", tickformat = ".1%"), 
    legend = list(title = list(text = "Stock")),  
    shapes = event_lines,  # Add vertical dashed lines for events
    hovermode = "x unified"  # Show unified hover tooltip across lines
  )

# Display the return plot
return_plot

```



<div style="background-color:#fce4ec; border-left:4px solid #f06292; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#880e4f;">
In the chart, the y-axis shows average daily returns, ranging from -0.4% to +0.6%. This scale helps us quickly see which stocks had positive or negative average performance in each period and how they compare to one another.
</div>



Chart Explanation:
While Apple and Microsoft remained relatively stable, Tesla stood out — swinging between extreme highs and lows. It’s a textbook example of the risk-return tradeoff.

In early 2020, when the pandemic hit, Tesla surged. Both volatility and returns spiked — high risk, high reward.

But in early 2022, amid war and economic tension, Tesla was just as volatile — yet this time, returns turned negative. Same risk, opposite outcome.

By 2023, as markets rebounded, so did Tesla.

If you remember where volatility spiked in the earlier "Volatility Over Time" chart, we can compare it with the "Average Return" chart and make the following observation: Volatility can bring big gains or steep losses. It’s not just a signal of opportunity, but a warning, too.

This brings us to a critical question:

## How much value do we put at risk by investing in a particular stock?


<div style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;">
In the code below, we create a chart that compares expected daily return (x-axis) and risk (y-axis), making it easy to assess the risk-return profile of each stock.
</div>


<div style="background-color:#fce4ec; border-left:4px solid #f06292; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#880e4f;">
This comparison could also be done using summary statistics or a table of values, but a visual plot makes the trade-off between risk and return easier to interpret at a glance.
</div>


```{r}
# Remove missing values from the combined returns data
returns_clean <- na.omit(returns_combined)

# Convert cleaned xts object to a data frame
returns_df <- data.frame(Date = index(returns_clean), coredata(returns_clean))

# Calculate average daily return for each stock
mean_vals <- colMeans(returns_df[, c("AAPL", "MSFT", "TSLA")])

# Calculate standard deviation (volatility) for each stock
sd_vals <- apply(returns_df[, c("AAPL", "MSFT", "TSLA")], 2, sd)

# Create a summary data frame with mean and standard deviation
summary_stats <- data.frame(
  Ticker = names(mean_vals),
  Mean = as.numeric(mean_vals),
  SD = as.numeric(sd_vals)
)

# Plot: Expected return vs risk (volatility)
ggplot(summary_stats, aes(x = Mean, y = SD, label = Ticker, color = Ticker)) +
  geom_point(size = 3) +                        
  geom_text(nudge_y = 0.001, size = 3, show.legend = FALSE) +  
  labs(
    title = "Expected Daily Return vs Risk (Standard Deviation)",
    x = "Expected Daily Return",
    y = "Risk (Standard Deviation)"
  ) +
  theme_minimal()                               # Clean plot style

```

As seen in the chart, Tesla offers the highest expected return — but it also carries the highest risk.
Microsoft stands out as the most stable option, with the lowest risk and a solid, moderate return.
Apple lands somewhere in the middle on both fronts.

# Estimating Expected Annual Return Using Regression Analysis


Regression analysis comes with several applications in finance. For example, the statistical method is fundamental to the Capital Asset Pricing Model (CAPM).

## Capital Asset Pricing Model (CAPM)

The Capital Asset Pricing Model (CAPM) is a model that describes the relationship between the expected return and risk of investing in a security. It shows that the expected return on a security is equal to the risk-free return plus a risk premium, which is based on the beta of that security. Below is an illustration of the CAPM concept.

![](images/CAMP)


^GSPC is the symbol used by Yahoo Finance to represent the S&P 500 index, which tracks the performance of 500 large companies listed on stock exchanges in the United States.

In CAPM analysis, the S&P 500 is commonly used as the "market portfolio" for comparing individual stocks like Apple (AAPL).


<div style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;">
In the code below, we calculate log returns because they measure the relative daily price change. Log returns are preferred in finance since they are additive over time and better handle volatility. Returns (rather than prices) are used for regression and risk analysis.
</div>





```{r}
# Calculate daily log returns for Apple stock
aapl_ret <- dailyReturn(Cl(AAPL), type = "log")
# Calculate daily log returns for S&P 500 index
sp500_ret <- dailyReturn(Cl(GSPC), type = "log")
```



<div style="background-color:#fce4ec; border-left:4px solid #f06292; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#880e4f;">
The value <code>0.025</code> is a commonly used example of an annual risk-free interest rate. It approximates the long-term yield of safe government bonds, like U.S. Treasuries. The number <code>252</code> reflects the typical number of trading days in a year and is standard in financial modeling.
</div>




```{r}
# Convert the annual risk-free rate to a daily rate for use in daily return calculations
rf <- 0.025 / 252
```



<div style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;">
In the code below, we subtract the daily risk-free rate from Apple’s and the S&P 500’s daily returns to calculate the excess return — the amount earned beyond a risk-free investment each day.
</div>




```{r}
# Calculate Apple's daily excess returns over the risk-free rate
aapl_excess <- aapl_ret - rf

# Calculate S&P 500's daily excess returns over the risk-free rate
sp500_excess <- sp500_ret - rf

```



Once the excess returns are prepared, this step fits a linear regression model (CAPM) to estimate Apple’s beta. The model shows how much Apple’s returns move in response to market movements.

The beta value estimated here will be used in the CAPM formula above to calculate Apple’s expected return relative to the market.




```{r}
returns <- na.omit(merge(aapl_excess, sp500_excess))
colnames(returns) <- c("AAPL_Excess", "SP500_Excess")

# Fit a linear regression model (CAPM) to estimate Apple's beta relative to the S&P 500
capm_model <- lm(AAPL_Excess ~ SP500_Excess, data = returns)

# Display a summary of the CAPM regression results
summary(capm_model)

# Extract the beta value
beta <- coef(capm_model)["SP500_Excess"]
print(beta)
```

### What do the results show?

Apple’s excess returns tend to react quite strongly to market ups and downs, with a beta of 1.2—so when the market moves, Apple usually moves even more.

There’s a bit of positive alpha, meaning Apple might be doing a little better than what the market predicts, but it’s not statistically significant. In other words, we can’t say for sure that Apple consistently beats market expectations.

The model itself does a solid job, explaining about 61% of the day-to-day swings in Apple’s returns, which is actually quite good by finance standards.

We created the linear model below to visually show the relationship between Apple’s excess returns and the S&P 500’s excess returns.

```{r}
ggplot(returns, aes(x = SP500_Excess, y = AAPL_Excess)) +
  geom_point(alpha = 0.3, color = "steelblue") + # Plot daily excess returns
  geom_smooth(method = "lm", color = "firebrick", se = FALSE) + # Add CAPM regression line (beta)
  labs(
    title = "AAPL Excess Return vs. S&P 500 Excess Return",
    x = "S&P 500 Excess Return",
    y = "AAPL Excess Return"
  ) +
  theme_minimal()

```

The red line you see is the regression line (sometimes called the CAPM fit). It shows what the model predicts about how Apple’s excess returns move in relation to the S&P 500’s excess returns.

The steepness of this line—known as beta—tells us how much Apple’s returns typically respond when the market goes up or down. You can also find this beta value in the linear regression summary.

Each blue dot represents a real day of trading: it’s Apple’s actual excess return plotted against the S&P 500’s excess return for that day. When you look at all the blue dots together, you can see how closely the real-world results match up with what the model predicts. If the dots stick close to the line, the model is doing a good job. If they’re scattered far away, there’s more going on than the model can explain.

For the next step, you take the beta value—that’s the slope of the red regression line—and use it in the CAPM formula along with the risk-free rate and the market risk premium. By plugging these numbers into the formula, you can calculate the expected return for Apple. In other words, CAPM helps you estimate how much return investors should expect, given Apple’s sensitivity to market movements and the extra reward for taking on market risk.


### Calculation of Expected Return

What is the expected annual return of Apple using the CAPM formula?
In other words, according to the CAPM model, what is Apple’s projected return for this year?

Let’s break down the answer using the formula from above in the article:

Expected return = Risk Free Rate + [Beta x Market Return Premium]

- Market risk premium” is typically taken from financial reports, academic sources (like Damodaran), or calculated as the difference between average market returns (e.g., S&P 500) and the current risk-free rate.


<div style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;">
The function calculates a stock’s expected annual return using CAPM by estimating beta from daily returns and applying the CAPM formula. It returns the result as a percentage.
</div>
```{r}
rf_annual = 0.025   
market_risk_premium <- 0.06
```


```{r}
# Calculates expected annual return (%) of a stock using CAPM
capm_expected_return <- function(stock_name, rf_annual, market_risk_premium) {
  stock <- get(stock_name)       # Get stock data
  market <- GSPC                 # Use S&P 500 as the market
  
  # Get daily log returns
  stock_ret <- dailyReturn(Cl(stock), type = "log")
  market_ret <- dailyReturn(Cl(market), type = "log")
  
  # Convert annual risk-free rate to daily
  rf_daily <- rf_annual / 252
  
  # Calculate excess returns
  stock_excess <- stock_ret - rf_daily
  market_excess <- market_ret - rf_daily
  
  # Merge and clean data
  df <- na.omit(merge(stock_excess, market_excess))
  colnames(df) <- c("Stock", "Market")
  
  # Estimate beta using linear regression
  model <- lm(Stock ~ Market, data = df)
  beta <- coef(model)["Market"]
  
  # Apply CAPM formula
  expected <- rf_annual + beta * market_risk_premium
  expected_percent <- expected * 100
  
  # Print and return expected return
  cat(sprintf("Expected annual return for %s: %.2f%%  |  Beta: %.2f\n",
              stock_name, expected_percent, beta))
  return(expected_percent)
}

```

```{r}
capm_expected_return("AAPL", rf_annual, market_risk_premium)
```


According to the CAPM model, Apple’s expected annual return is approximately 9.68%. This means that, given the current risk-free rate, market risk premium, and Apple’s beta, investors can expect an average annual return of around 11% if they hold Apple stock.


*How about the risk ?*
An 11% annual return isn’t risky on its own, but in finance, such high returns usually come with higher risk. It reflects compensation for bearing more uncertainty.

### Repeating the CAPM Interpretation for TSLA and MSFT


```{r}
capm_expected_return("MSFT", rf_annual, market_risk_premium)
capm_expected_return("TSLA", rf_annual, market_risk_premium)
```


Microsoft (MSFT):
Expected annual return = 9.58%
- Indicates moderate risk and stable return, closely aligned with market movements.

Tesla (TSLA):
Expected annual return = 11.96%
- Suggests higher risk and higher expected return, reflecting stronger sensitivity to market changes.

In short: Tesla offers greater return potential but comes with higher risk, while Microsoft and Apple provide more stable performance with lower volatility.


<p style="margin: 20px 0;">

Alright — now that things are starting to make a bit more sense, let’s go back to the question we asked at the very beginning:

</p>

::: {style="background-color:#fdfdfd; border-left:4px solid #90caf9; padding:12px 16px; font-size:1em; color:#333; margin-top:20px;"}
<em>Should I put all my money into one strong stock, or is it smarter to diversify and spread the risk?</em>
:::


Let’s take a closer look.

# Does diversification reduce risk?

There is a well-known saying often attributed to economist Harry Markowitz, the father of Modern Portfolio Theory:

::::: {style="display: flex; align-items: center; justify-content: center; flex-wrap: wrap; gap: 20px; margin: 30px auto; max-width: 900px;"}
<!-- Left: Image -->

::: {style="background-color:#fafafa; border:1px solid #ddd; padding:10px; border-radius:6px; width:200px; text-align:center; box-shadow: 1px 1px 5px rgba(0,0,0,0.05); margin: 20px auto;"}
<img src="images/hary.png" alt="Harry Markowitz" style="max-width:100%; height:auto;"/>
:::

<!-- Right: Quote -->

::: {style="flex: 1; min-width:250px; background-color:#fefefe; border-left:4px solid #a5d6a7; padding:14px 20px; font-style:italic; font-size:1.1em; color:#333; border-radius:6px; box-shadow:1px 1px 6px rgba(0,0,0,0.04);"}
```         
“Diversification is the only free lunch in investing.”
```
:::
:::::

::: {style="background-color:#fcfcfc; border:1px solid #ddd; border-radius:6px; padding:14px; max-width:300px; margin: 30px auto 20px auto; box-shadow:1px 1px 6px rgba(0,0,0,0.05); text-align:left;"}
<img src="images/eggs.png" alt="Basket of Eggs" style="max-width:100%; height:auto;"/>
:::

<p style="margin-top:20px;">

Diversification means spreading investments across different assets to reduce exposure to the risk of any single investment.
The basic idea is that not all assets move in the same direction at the same time.
By combining assets with different risk and return profiles, investors can potentially reduce the overall risk of their portfolio while maintaining reasonable return expectations.
The goal of diversification is to reduce overall volatility and achieve a more balanced return by combining assets with low correlation.

</p>

## Correlation analysis

Correlation analysis is conducted to identify which assets, when combined in a portfolio, will have a risk-reducing effect.

::: {style="background-color:#fefefe; border-left:4px solid #64b5f6; padding:16px 20px; font-size:1.05em; color:#333; max-width:600px; margin: 30px auto; border-radius:6px; box-shadow:1px 1px 5px rgba(0,0,0,0.04); line-height:1.6;"}
<p style="margin: 0;">

<strong>Low correlation</strong> reduces portfolio volatility.

</p>

<p style="margin: 8px 0 0 0;">

<strong>High correlation</strong> increases portfolio volatility.

</p>
:::


<div style="background-color:#f0f8ff; border-left:4px solid #64b5f6; padding:10px 14px; font-size:0.95em; color:#333; margin:16px 0;">
This visualization was chosen because it makes it incredibly easy to spot relationships between the stocks at a glance. While we could’ve shown the numbers in a plain table, the color-coded layout provides instant insight without the need to interpret raw values.
</div>




```{r message=TRUE}
# Compute correlation matrix for selected stocks
cor_matrix <- cor(returns_combined[, c("AAPL", "MSFT", "TSLA")], use = "complete.obs")

# Plot upper triangle of the correlation matrix
corrplot(cor_matrix, method = "color", type = "upper", 
         tl.col = "black", tl.srt = 45, addCoef.col = "black")


```

Apple (AAPL) and Microsoft (MSFT) show a strong positive correlation (0.73), indicating their daily returns tend to move in the same direction.
Tesla (TSLA) is less correlated with both AAPL (0.47) and MSFT (0.43), suggesting it behaves more independently in terms of daily returns.
 

## Proposed Portfolio

The proposed portfolio allocation of 50% Microsoft, 30% Tesla, and 20% Apple is based on the observed correlation structure among the assets and the goal of achieving effective diversification.

Microsoft and Apple are highly correlated, which means they tend to move in the same direction.
Allocating too much to both would reduce diversification benefits.
Therefore, Microsoft is kept as the core low-volatility asset, while Apple’s weight is limited to avoid excessive overlap.

Tesla, on the other hand, has only moderate correlation with both Microsoft and Apple.
Including Tesla at a moderate level (30%) enhances diversification and adds growth potential, without excessively increasing portfolio risk.

## Method of Comparison

### Shape Ratio :

The Sharpe ratio is one of the most widely used methods for measuring risk-adjusted relative returns.
It compares a fund's historical or projected returns relative to an investment benchmark with the historical or expected variability of such returns.

The higher the ratio, the higher the risk compensation an investment offers.
Investors will therefore have a preference for investments with a high Sharpe ratio or investments that raise the entire portfolio's Sharpe ratio through diversification.

::: {style="background-color:#fafafa; border:1px solid #ddd; padding:10px; border-radius:6px; width:550px; text-align:center; box-shadow: 1px 1px 5px rgba(0,0,0,0.05); margin: 20px auto;"}
<img src="images/shaperatio.png" alt="Sharpe Ratio Formula" style="max-width:100%; height:auto;"/>
:::

## Hypothesis

Our hypothesis is that the proposed portfolio (50% Microsoft, 30% Tesla, 20% Apple) offers a higher risk-adjusted return than both an equally weighted portfolio and any single-asset portfolio.

To test this, we will compare the Sharpe ratio of our proposed portfolio against :

- A random portfolio with equal weights across all three assets, and

- Fully concentrated portfolios consisting of only Microsoft, only Apple, or only Tesla.



```{r}
# Merge daily returns of AAPL, MSFT, and TSLA, removing NAs
returns <- na.omit(merge(
  dailyReturn(Ad(AAPL)),
  dailyReturn(Ad(MSFT)),
  dailyReturn(Ad(TSLA))
))

# Function to calculate and print the annualized Sharpe Ratio of a portfolio
portfolio_sharpe <- function(weights, returns, name) {
  mean_ret <- colMeans(returns) * 252            # Annualized mean returns
  cov_matrix <- cov(returns) * 252               # Annualized covariance matrix
  port_return <- sum(weights * mean_ret)         # Portfolio expected return
  port_variance <- t(weights) %*% cov_matrix %*% weights  # Portfolio variance
  port_volatility <- sqrt(port_variance)         # Portfolio standard deviation
  port_sharpe <- port_return / port_volatility   # Sharpe Ratio
  
  cat("\n====", name, "====\n")
  cat("Sharpe Ratio: ", round(port_sharpe, 2), "\n")
}

# Evaluate Sharpe Ratios for different portfolios
portfolio_sharpe(c(0.50, 0.30, 0.20), returns, "Proposed Portfolio")
portfolio_sharpe(c(0.33, 0.33, 0.33), returns, "Random Portfolio")
portfolio_sharpe(c(0.00, 0.00, 1.00), returns, "100% Tesla")
portfolio_sharpe(c(0.00, 1.00, 0.00), returns, "100% Apple")
portfolio_sharpe(c(1.00, 0.00, 0.00), returns, "100% Microsoft")

```



## Which Portfolio Performs Best?

As expected, the proposed portfolio (50% MSFT – 30% TSLA – 20% AAPL) achieved the highest Sharpe ratio (1.32) among all compared strategies, confirming our hypothesis that this allocation provides the most efficient return relative to the risk taken.

The Evenly Split Portfolio, which distributes capital equally across all three assets without considering their risk characteristics, follows closely with a Sharpe ratio of 1.30, but falls slightly behind in efficiency.

All single-asset portfolios (100% in either Tesla, Apple, or Microsoft) perform worse in terms of risk-adjusted return:

Tesla shows the lowest Sharpe ratio (0.97) due to its high volatility and drawdown,

Apple (1.10) and Microsoft (1.16) perform better individually but lack the benefits of diversification.

These results confirm that strategic asset allocation, rather than equal weighting or concentration in a single asset, leads to better risk-adjusted performance.

## Recommendation

While the proposed portfolio (50% Microsoft, 30% Tesla, 20% Apple) achieved the highest Sharpe ratio in our analysis, it is important to emphasize that there is no universally ideal portfolio.
The optimal allocation depends not only on numerical performance metrics but also on the investor's individual risk tolerance, goals, and personal preferences.

For example, an investor with a high risk appetite may reasonably prefer a higher allocation to Tesla, accepting greater volatility in exchange for potentially higher returns.
In contrast, a more conservative investor might prioritize stability and allocate more heavily to Microsoft or Apple.

Therefore, we recommend that portfolio construction should not be based solely on statistical indicators such as the Sharpe ratio.
Instead, investors should take into account their own investment personality, time horizon, and financial goals.
Quantitative results can inform decision-making—but they should be used as a guide, not as a rule.




---


# Sources

Testing ChatGPT: Arithmetic vs. Geometric Returns — TheStreet Retirement Daily
https://www.thestreet.com/retirement-daily/your-money/testing-chatgpt-arithmetic-vs-geometric-returns

Harry Markowitz and Modern Portfolio Theory — Corporate Finance Institute
https://corporatefinanceinstitute.com/resources/career-map/sell-side/capital-markets/harry-markowitz/

Sharpe Ratio — Investopedia
https://www.investopedia.com/terms/s/sharperatio.asp


What is CAPM Formula? — Corporate Finance Institute
https://corporatefinanceinstitute.com/resources/valuation/what-is-capm-formula/























