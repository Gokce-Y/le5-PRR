---
title: "Stock Market Analysis"
subtitle: "Risk, Return, and Portfolio Insights"
author: 
  - name: "Yaren Demir"
  - name: "Ivan Halka"
format:
  html:
    toc: true
    toc-depth: 3
    toc-float: true
    number-sections: true
    theme: journal        
    code-fold: true       
    code-tools: true    
    df-print: paged      
editor: visual
fontsize: 12pt
mainfont: "Palatino"
geometry: margin=1in
---

```{=html}
<style>
  body {
    background-color: #ffc0cb;
  }

  #quarto-content {
    background-color: white;
    border: 3px solid #cc3366;
    border-radius: 8px;
    padding: 2rem;
    margin-top: 1rem;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);
    max-width: 900px;
    margin-left: auto;
    margin-right: auto;
  }
  
    h1 {
    color: #cc3366; 
  }
  
    h2 {
    color:  #ff99b6;
  }
  
</style>
```

```{r message=FALSE, warning=FALSE, include=FALSE}
library(quantmod)
library(PerformanceAnalytics)
library(dplyr)
library(lubridate)
library(plotly)
library(corrplot)
library(tidyr)
```


::: {.callout-note appearance="minimal"}
**FHNW Studiengang Data Science – Module PRR, LE5 Challenge**
:::


# Introduction

This report aims to help beginners understand essential financial concepts by analyzing real stock market data from AAPL, MSFT, and TSLA using R.


![](images/tma.webp)

## Summary of Questions and Analysis Methods

Below is a summary of the questions explored in this report and the analytical approaches used to address them:

<ul style="line-height:1.8; font-size:1.05em;">

<li><strong>How has the stock price changed over time?</strong><br> Analyzed using a line chart with Plotly.</li>

<li><strong>How do we calculate volatility?</strong><br> Calculated as the standard deviation of daily returns.</li>

<li><strong>What is the average daily return of the stock?</strong><br> Computed using the arithmetic mean of daily returns.</li>

<li><strong>How much value is at risk when investing in a stock?</strong><br> Visualized using a scatter plot of mean return versus standard deviation (risk-return profile).</li>

<li><strong>How do you calculate the expected annual return for an asset?</strong><br> Estimated using the CAPM (Capital Asset Pricing Model) via linear regression on excess returns.</li>

<li><strong>What is the correlation between different stocks?</strong><br> Assessed using a Pearson correlation matrix with visualization via <code>corrplot</code>.</li>

<li><strong>How can we build a diversified stock portfolio?</strong><br> Based on diversification logic derived from correlation differences between assets.</li>

</ul>

::: {style="background-color:#f0f8ff; border-left:4px solid #64b5f6; padding:10px 16px; margin: 20px 0; font-size:1em; color:#333;"}
<strong>All calculations were conducted using R and data from Yahoo Finance.</strong>
:::

## Getting the Data from Yahoo Finance

Historical stock data is retrieved using the **`quantmod`** package without requiring authentication.

**Note:** The analysis focuses on AAPL, MSFT, and TSLA. The S&P 500 index (\^GSPC) is included for benchmarking purposes in subsequent CAPM modeling.

```{r}
symbols <- c("AAPL", "MSFT", "TSLA", "^GSPC")
getSymbols(symbols, src = "yahoo", from = "2019-01-01", to = "2024-12-31")
```

We now continue with return calculations and data preparation.

------------------------------------------------------------------------

# How has the stock price changed over time?

One of the first questions in the mind of any new investor in the stock market is that why do stock prices change every second?

Well, there’s no straightforward answer to that question. The price of a stock is influenced by many different forces—each affecting its direction and magnitude. While it’s possible to understand some of these factors, trying to predict the market often proves to be more misleading than helpful.

Instead of predicting, a more effective approach is to observe how prices have moved in the past.

::: {style="background-color:#fce4ec; border-left:4px solid #f06292; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#880e4f;"}
We use adjusted closing prices because they account for stock splits, dividends, and other corporate actions, giving a more accurate view of the stock's true return over time.
:::

```{r}
# Extract date and adjusted closing prices for selected stocks
extract_adjusted_df <- function(stock_xts, ticker) {
  data.frame(date = index(stock_xts), coredata(stock_xts)) |>
    select(date, !!sym(paste0(ticker, ".Adjusted")))
}


tickers <- c("AAPL", "MSFT", "TSLA")

# Generate list of cleaned data frames for each stock
data_list <- lapply(tickers, function(tkr) extract_adjusted_df(get(tkr), tkr))
names(data_list) <- tickers

# Define colors for each ticker 
colors <- c(AAPL = "green", MSFT = "blue", TSLA = "red")


```

There are many ways to visualize change over time, but the most common is a line chart.

::: {style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;"}
The chart is created using Plotly, an interactive visualization library that enables users to zoom, hover for details, and examine values for specific dates.
:::

```{r}
# General function to create adjusted closing price plots
create_stock_plot <- function(data, y_col, title_text, line_color) {
  plot_ly(
    data = data,
    x = ~date,
    y = as.formula(paste0("~", y_col)),
    type = 'scatter',
    mode = 'lines',
    name = title_text,
    line = list(color = line_color)
  ) %>%
    layout(
      title = paste0(title_text, " – Adjusted Closing Price"),
      xaxis = list(title = "Date"),
      yaxis = list(title = "Adjusted Close Price (USD)"),
      showlegend = FALSE
    )
}

# Apply plotting function to each stock
plots_adj <- mapply(
  function(data, ticker, color) {
    create_stock_plot(data, paste0(ticker, ".Adjusted"), paste0(ticker, " Inc. (", ticker, ")"), color)
  },
  data = data_list,
  ticker = names(colors),
  color = colors,
  SIMPLIFY = FALSE
)

# Display individual plots
plots_adj[[1]]
plots_adj[[2]]
plots_adj[[3]]
```

If you look closely at the y-axis, you’ll notice that Tesla’s adjusted closing price spans a wider range. This already gives us an early hint that Tesla might be more volatile compared to Apple and Microsoft.

# Which Stock Has the Highest Risk?

## Understanding Volatility

Volatility is a frequently encountered concept in the world of finance and holds great importance for investors. *But what exactly is volatility?* Volatility refers to the degree of fluctuation in the price of a financial asset. In other words, it describes how quickly and significantly the price of an asset changes.

When I was a kid I had an opportunity to have lunch with an economist from my country. One of the thing he said :"Volatility is uncertainty". After so many years I consider it still the best one-word explanation.

To analyze a stock’s risk, we don’t just look at its price — we track how much the price changes each day. This is where daily return comes in: calculates the daily return of a stock by taking today's Opening price, dividing it by yesterday's Opening price, and subtracting 1. This shows the percentage change in the stock's value from one day to the next.

## Visualization: Daily Return Over Time

::: {style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;"}
In the code below, we use the <code>dailyReturn()</code> function from the <code>quantmod</code> package.
:::

**Note:** Although the adjusted prices were previously retrieved, we extract them again here because the dailyReturn() function requires the input to have a standard column name format.

```{r}
# Function to get daily log returns from adjusted prices
get_daily_returns <- function(symbols) {
  returns_list <- lapply(symbols, function(sym) dailyReturn(Ad(get(sym))))
  names(returns_list) <- symbols
  return(returns_list)
}

# Call the function to retrieve returns for defined tickers
returns_list <- get_daily_returns(tickers)
```

**Note**: The returns_list object contains time series data in xts format. This is because functions like dailyReturn() from packages such as quantmod and PerformanceAnalytics are specifically designed to work with financial time series, and therefore use the xts (eXtensible Time Series) class as their standard data structure.

::: {style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;"}
The chart uses Plotly for interactive features like zooming and hovering. While ggplot2 could also be used, Plotly was preferred to better explore values on specific dates.
:::

```{r}
# Function to create daily return plots using Plotly
plot_daily_return <- function(return_xts, ticker, line_color = "blue") {
  plot_ly() %>%
    add_lines(
      x = ~index(return_xts),             # Date on x-axis
      y = ~coredata(return_xts),          # Daily return values on y-axis
      name = ticker,
      line = list(color = line_color)
    ) %>%
    layout(
      title = paste("Daily Return of", ticker),
      xaxis = list(title = "Date"),
      yaxis = list(title = "Daily Return"),
      legend = list(x = 0.1, y = 0.9)
    )
}

# Create return plots for all tickers
plots_Adj_Daily <- mapply(plot_daily_return, returns_list, names(colors), colors, SIMPLIFY = FALSE)


plots_Adj_Daily[[1]]
plots_Adj_Daily[[2]]
plots_Adj_Daily[[3]]

```

One thing stands out here: Tesla (TSLA) is far more volatile than Apple (AAPL) and Microsoft (MSFT). While AAPL and MSFT tend to show steady, predictable price movements, TSLA swings much more aggressively from day to day. This kind of behavior points to Tesla being a more speculative and higher-risk stock.

At the same time, we can observe periods when all three stocks move in the same direction — either rising or falling together. This suggests that broader market forces, such as economic news or global events, can affect all stocks simultaneously, regardless of their individual characteristics.

## Visualization: Volatility Over Time

To better understand how volatility changes over time, we grouped the daily returns into half-year periods and calculated the standard deviation for each. The chart below shows how the risk level evolved for each stock.

Markets tend to get turbulent during uncertain times — whether it’s due to political unrest, economic shifts, natural disasters, or unexpected company news. In such periods, stock prices can swing sharply, creating both big risks and big opportunities or losses.

The period from 2019 to 2024 was anything but ordinary. From the COVID-19 outbreak to the war in Ukraine, rising inflation, and the recent AI-driven stock surge — markets have been shaped by one major event after another.

To keep our analysis clear, we decided to use a simpler method: - grouping adjusted daily returns into half-year periods and calculating the standard deviation for each group.


**Note:** This method is not a standard approach in finance and was designed specifically for our analysis. While it helps simplify trends by grouping daily returns into half-year periods, it may also hide short-term changes. The choice of time intervals can influence the results.

**Note:** As an alternative, the data could have been divided into smaller time intervals, or a GARCH model could have been used to estimate time-varying volatility more accurately. However, our goal was to keep the analysis simple and easy to understand. Additionally, we are not yet familiar with the GARCH model, so we decided to use a more straightforward method.

::: {style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;"}
In the code below, we group daily returns into half-year periods and calculate the average (mean) and risk (standard deviation) for each stock in each period.
:::

```{r}
# Combine all return series into one xts object for further analysis
returns_combined <- do.call(merge, returns_list)
colnames(returns_combined) <- tickers

# Convert xts to data frame and add HalfYear label for grouping
returns_df <- data.frame(Date = index(returns_combined), coredata(returns_combined)) %>%
  mutate(HalfYear = paste0(year(Date), " H", ifelse(month(Date) <= 6, 1, 2)))

# Summarize returns by half-year: mean and standard deviation
grouped_data <- returns_df %>%
  group_by(HalfYear) %>%
  summarise(across(
    all_of(tickers),
    list(Mean = ~mean(.x, na.rm = TRUE), SD = ~sd(.x, na.rm = TRUE))
  ))

```

::: {style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;"}
In the code below, we add event labels and lines to highlight key periods.
:::

```{r}
# Order HalfYear factor to ensure chronological plot
grouped_data$HalfYear <- factor(grouped_data$HalfYear, levels = grouped_data$HalfYear)

# Key market events for annotation
event_labels <- data.frame(
  HalfYear = c("2020 H1", "2021 H1", "2022 H1", "2023 H1"),
  label = c("COVID", "Vaccine", "War", "AI")
)

# Vertical dashed lines for event markers
event_lines <- lapply(event_labels$HalfYear, function(h) {
  list(
    type = "line",
    x0 = h, x1 = h,
    y0 = 0, y1 = 1,
    xref = "x", yref = "paper",
    line = list(color = "red", dash = "dash", width = 0.5)
  )
})
```

```{r}
# General plot function for grouped time series 
create_grouped_plot <- function(data, y_cols, stock_names, title, y_label, colors) {
  plt <- plot_ly(data = data)
  for (i in seq_along(y_cols)) {
    plt <- add_trace(
      plt,
      x = ~HalfYear,
      y = as.formula(paste0("~", y_cols[i])),
      name = stock_names[i],
      type = 'scatter',
      mode = 'lines+markers',
      line = list(color = colors[i])
    )
  }

  plt %>%
    add_annotations(
      data = event_labels,
      x = ~HalfYear,
      y = 0,
      text = ~label,
      showarrow = FALSE,
      yanchor = "bottom",
      font = list(color = "red", size = 11)
    ) %>%
    layout(
      title = title,
      xaxis = list(title = "Period (Half-Year)", tickangle = -45),
      yaxis = list(title = y_label),
      legend = list(title = list(text = "Stock")),
      shapes = event_lines,
      hovermode = "x unified"
    )
}
```

```{r}
# Plot 6-month volatility for each stock
volatility_plot <- create_grouped_plot(
  grouped_data,  # Grouped data
  y_cols = paste0(tickers, "_SD"),  # Volatility columns
  stock_names = tickers,   # Stock names
  title = "6-Month Volatility by Stock with Key Events",
  y_label = "Volatility (Standard Deviation)",
  colors = c("blue", "orange", "green")  # Line colors
)

volatility_plot

```

The story told by the graph is pretty straightforward — and honestly, it played out just like we expected.

In early 2020, when COVID-19 hit, volatility shot up across the board. Apple, Microsoft, and Tesla all saw sharp spikes as markets were rattled by global uncertainty.

By early 2021, things started to settle. With vaccine rollouts underway and a clearer path forward, investor confidence slowly returned, and volatility dropped.

Then came early 2022. Russia’s invasion of Ukraine triggered another wave of market turbulence. But just like before, the shock faded, and things gradually stabilized.

Up to that point, the three stocks were moving in sync — reacting to global events in similar ways and eventually finding their footing.

Sure, Tesla swings harder than the others. But that’s also part of what draws investors in. Bigger risk can mean bigger reward — and for some, that trade-off is worth it.

In the following section, we’ll take a closer look at how each stock actually performed.

# Average daily return of the stock

## Arithmetic Mean Return and Geometric Mean Return

Before we jump into the results, a quick note on how returns are measured.

There are two main ways: arithmetic mean and geometric mean. The arithmetic mean simply averages the returns — add them up, divide by the number of periods. It’s quick, easy, and great for short-term comparisons.

We’re using the arithmetic mean here because we’re focused on comparing average performance over set time intervals — not modeling long-term compounding.

## Visualization: Average Returns Over Time

In the previous section, we mentioned that risk can also lead to reward. So after seeing Tesla’s extreme volatility, you might be thinking:

***"Well, with all that risk, I hope the returns are worth it!"***

Let’s find out by grouping adjusted daily returns into half-year periods — using the same method we applied for volatility.

::: {style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;"}
In the code below, we create a chart that shows how returns changed over time and highlights the impact of key events.
:::

```{r}
# Plot 6-month average returns for each stock
return_plot <- create_grouped_plot(
  grouped_data,                              # Grouped data
  y_cols = paste0(tickers, "_Mean"),         # Return columns
  stock_names = tickers,                     # Stock names
  title = "6-Month Average Returns by Stock with Key Events",
  y_label = "Average Daily Return",
  colors = c("blue", "orange", "green")      # Line colors
)

return_plot
```

::: {style="background-color:#fce4ec; border-left:4px solid #f06292; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#880e4f;"}
In the chart, the y-axis shows average daily returns, ranging from -0.4% to +1%. This scale helps us quickly see which stocks had positive or negative average performance in each period and how they compare to one another.
:::

**Note:** Although a 1% return may seem small, it is actually a very high rate in financial markets.

Chart Explanation: While Apple and Microsoft remained relatively stable, Tesla stood out — swinging between extreme highs and lows. It’s a textbook example of the risk-return tradeoff.

If you remember where volatility spiked in the earlier "Volatility Over Time" chart, we can compare it with the "Average Return" chart and make the following observation: Volatility can bring big gains or steep losses. It’s not just a signal of opportunity, but a warning, too.

This brings us to a critical question:

## How much value do we put at risk by investing in a particular stock?

::: {style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;"}
In the code below, we create a chart that compares expected daily return (x-axis) and risk (y-axis), making it easy to assess the risk-return profile of each stock.
:::

::: {style="background-color:#fce4ec; border-left:4px solid #f06292; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#880e4f;"}
This comparison would typically involve a risk curve. However, since we are comparing the stocks based on risk, using a risk versus expected daily return graph is actually a common and appropriate method.
:::


```{r}
#Clean and prepare daily return data
returns_clean <- na.omit(returns_combined)
returns_df <- data.frame(Date = index(returns_clean), coredata(returns_clean))

#Compute average daily return and standard deviation (volatility)
summary_stats <- returns_df %>%
  summarise(across(
    all_of(tickers),
    list(Mean = ~mean(.x), SD = ~sd(.x))
  )) %>%
  pivot_longer(everything(), names_to = c("Ticker", "Metric"), names_sep = "_") %>%
  pivot_wider(names_from = "Metric", values_from = "value")

#Visualize the expected return vs risk (scatter plot)
ggplot(summary_stats, aes(x = Mean, y = SD, label = Ticker, color = Ticker)) +
  geom_point(size = 3) +
  geom_text(nudge_y = 0.001, size = 3, show.legend = FALSE) +
  labs(
    title = "Expected Daily Return vs Risk (Standard Deviation)",
    x = "Expected Daily Return",
    y = "Risk (Standard Deviation)"
  ) +
  theme_minimal()
```

::: {style="background-color:#fce4ec; border-left:4px solid #f06292; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#880e4f;"}
This function offers a simple way to calculate the average daily return and risk (standard deviation) for multiple stocks at once. It also reshapes the data nicely, making it easy to compare. While this method works well for exploring basic risk-return patterns, it only looks at daily data and doesn’t convert the results to an annual scale, which can make comparisons harder. Technically, we could have done this by multiplying the daily mean by 252 and the standard deviation by the square root of 252 but for annual analysis, we will apply a different method in the next section.
:::

As seen in the chart, Tesla offers the highest expected return — but it also carries the highest risk. Microsoft stands out as the most stable option, with the lowest risk and a solid, moderate return. Apple lands somewhere in the middle on both fronts.



# Estimating Expected Annual Returns

Regression analysis comes with several applications in finance. For example, the statistical method is fundamental to the Capital Asset Pricing Model (CAPM).

## Capital Asset Pricing Model (CAPM)

The Capital Asset Pricing Model (CAPM) is a model that describes the relationship between the expected return and risk of investing in a security. It shows that the expected return on a security is equal to the risk-free return plus a risk premium, which is based on the beta of that security. Below is an illustration of the CAPM concept.

![](images/CAMP)

**Note:** Regression is used in CAPM because the model itself is linear, and regression offers both a way to estimate beta and to evaluate the model's reliability. While direct covariance-based formulas can be used, they don’t provide diagnostic insights like regression does.

\^GSPC is the symbol used by Yahoo Finance to represent the S&P 500 index, which tracks the performance of 500 large companies listed on stock exchanges in the United States.

In CAPM analysis, the S&P 500 is commonly used as the "market portfolio" for comparing individual stocks like Apple (AAPL).

::: {style="background-color:#fce4ec; border-left:4px solid #f06292; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#880e4f;"}
The CAPM-based analysis transforms daily returns into annualized figures, enabling comparability across assets. It effectively captures the extent to which a stock moves with the overall market by estimating beta through linear regression. However, the method assumes a purely linear relationship and relies on a single-factor model. As a result, it overlooks idiosyncratic risk and excludes multi-factor influences that may impact returns in more complex market environments.
:::

::: {style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;"}
In the code below, we calculate log returns because they measure the relative daily price change. Log returns are preferred in finance since they are additive over time and better handle volatility. Returns (rather than prices) are used for regression and risk analysis.
:::

```{r}
# Get daily log returns
aapl_ret <- dailyReturn(Cl(AAPL), type = "log")
sp500_ret <- dailyReturn(Cl(GSPC), type = "log")
```

::: {style="background-color:#fce4ec; border-left:4px solid #f06292; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#880e4f;"}
The value <code>0.025</code> is a commonly used example of an annual risk-free interest rate. It approximates the long-term yield of safe government bonds, like U.S. Treasuries. The number <code>252</code> reflects the typical number of trading days in a year and is standard in financial modeling.
:::

```{r}
# Convert annual risk-free rate (2.5%) to daily rate (252 trading days)
rf <- 0.025 / 252
```

::: {style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;"}
In the code below, we subtract the daily risk-free rate from Apple’s and the S&P 500’s daily returns to calculate the excess return — the amount earned beyond a risk-free investment each day.
:::

```{r}
# Compute excess returns: subtract daily risk-free rate from returns
aapl_excess <- aapl_ret - rf
sp500_excess <- sp500_ret - rf
```

Once the excess returns are prepared, this step fits a linear regression model (CAPM) to estimate Apple’s beta. The model shows how much Apple’s returns move in response to market movements.

The beta value estimated here will be used in the CAPM formula above to calculate Apple’s expected return relative to the market.

```{r}
# Merge excess return series into a single data frame
capm_data <- na.omit(merge(aapl_excess, sp500_excess))
colnames(capm_data) <- c("AAPL_Excess", "SP500_Excess")

# Fit CAPM regression model: AAPL excess return ~ S&P 500 excess return
capm_model <- lm(AAPL_Excess ~ SP500_Excess, data = capm_data)

# Print regression summary and extract beta coefficient
summary(capm_model)
beta <- coef(capm_model)["SP500_Excess"]
print(paste("Beta for AAPL:", round(beta, 2)))
```

### What do the results show?

Apple’s excess returns tend to react quite strongly to market ups and downs, with a beta of 1.2—so when the market moves, Apple usually moves even more.

There’s a bit of positive alpha, meaning Apple might be doing a little better than what the market predicts, but it’s not statistically significant. In other words, we can’t say for sure that Apple consistently beats market expectations.

The model itself does a solid job, explaining about 61% of the day-to-day swings in Apple’s returns, which is actually quite good by finance standards.

We created the linear model below to visually show the relationship between Apple’s excess returns and the S&P 500’s excess returns.

```{r}
# Visualize CAPM regression between AAPL and SP500 excess returns
ggplot(capm_data, aes(x = SP500_Excess, y = AAPL_Excess)) +
  geom_point(alpha = 0.3, color = "steelblue") +
  geom_smooth(method = "lm", color = "firebrick", se = FALSE) +
  labs(
    title = "AAPL Excess Return vs. S&P 500 Excess Return (CAPM)",
    x = "S&P 500 Excess Return",
    y = "AAPL Excess Return"
  ) +
  theme_minimal()
```

The red line you see is the regression line (sometimes called the CAPM fit). It shows what the model predicts about how Apple’s excess returns move in relation to the S&P 500’s excess returns.

The slope of this line—known as beta—tells us how much Apple’s returns typically respond when the market goes up or down. You can also find this beta value in the linear regression summary.

Each blue dot represents a real day of trading: it’s Apple’s actual excess return plotted against the S&P 500’s excess return for that day. When you look at all the blue dots together, you can see how closely the real-world results match up with what the model predicts. If the dots stick close to the line, the model is doing a good job. If they’re scattered far away, there’s more going on than the model can explain.

For the next step, you take the beta value and use it in the CAPM formula along with the risk-free rate and the market risk premium. By plugging these numbers into the formula, you can calculate the expected return for Apple. In other words, CAPM helps you estimate how much return investors should expect, given Apple’s sensitivity to market movements and the extra reward for taking on market risk.

### Calculation of Expected Return

What is the expected annual return of Apple using the CAPM formula? In other words, according to the CAPM model, what is Apple’s projected return for this year?

Let’s find the answer using the formula from above in the article:

Expected return = Risk Free Rate + \[Beta x Market Return Premium\]

**Note:** Market risk premium and annual risk-free rate is typically taken from financial reports.

::: {style="background-color:#f1fdf5; border-left:4px solid #81c784; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#2e7d32;"}
The function calculates a stock’s expected annual return using CAPM by estimating beta from daily returns and applying the CAPM formula. It returns the result as a percentage.
:::

```{r}
# Annual risk-free rate (e.g., yield of government bonds)
rf_annual <- 0.025

# Market risk premium (expected market return - risk-free rate)
market_risk_premium <- 0.06
```

```{r}
# Generalized CAPM expected return function (annualized)
capm_expected_return <- function(stock_symbol, rf_annual) {
  # Retrieve stock and market data
  stock_data <- get(stock_symbol)
  market_data <- GSPC  # S&P 500

  # Calculate daily log returns
  stock_ret <- dailyReturn(Cl(stock_data), type = "log")
  market_ret <- dailyReturn(Cl(market_data), type = "log")

  # Convert risk-free rate to daily
  rf_daily <- rf_annual / 252

  # Calculate excess returns
  stock_excess <- stock_ret - rf_daily
  market_excess <- market_ret - rf_daily

  # Merge and clean excess returns
  df <- na.omit(merge(stock_excess, market_excess))
  colnames(df) <- c("Stock", "Market")

  # Estimate beta via linear regression
  model <- lm(Stock ~ Market, data = df)
  beta <- unname(coef(model)["Market"])

  # CAPM expected annual return calculation
  expected_return <- rf_annual + beta * market_risk_premium
  expected_percent <- expected_return * 100

  
  cat(sprintf("Expected annual return for %s: %.2f%%  |  Beta: %.2f\n",
              stock_symbol, expected_percent, beta))

  return(expected_percent)
}
```

```{r}
capm_expected_return("AAPL", rf_annual)
```

According to the CAPM model, Apple’s expected annual return is approximately 10%. This means that, given the current risk-free rate, market risk premium, and Apple’s beta, investors can expect an average annual return of around 10% if they hold Apple stock.

**How about the risk ?** An 10% annual return isn’t risky on its own, but in finance, high returns usually come with higher risk.

### Repeating the CAPM Interpretation for TSLA and MSFT

```{r}
# Run CAPM expected return estimation for other stocks
capm_expected_return("MSFT", rf_annual)
capm_expected_return("TSLA", rf_annual)
```

Microsoft (MSFT): Expected annual return = 10% - Indicates moderate risk and stable return, like APPL.

Tesla (TSLA): Expected annual return = 12% - Suggests higher risk and higher expected return, reflecting stronger sensitivity to market changes.

In short: Tesla offers greater return potential but comes with higher risk, while Microsoft and Apple provide more stable performance with lower volatility.



::: {style="background-color:#fdfdfd; border-left:4px solid #90caf9; padding:12px 16px; font-size:1em; color:#333; margin-top:20px;"}
<em>Alright — now that we have clarified the concepts of volatility, average daily return, and expected annual return, let’s take action and identify the best-performing portfolio.</em>
:::


# Does diversification reduce risk?

There is a well-known saying often attributed to economist *Harry Markowitz*, the father of Modern Portfolio Theory:

::::: {style="display: flex; align-items: center; justify-content: center; flex-wrap: wrap; gap: 20px; margin: 30px auto; max-width: 900px;"}
<!-- Left: Image -->

::: {style="background-color:#fafafa; border:1px solid #ddd; padding:10px; border-radius:6px; width:200px; text-align:center; box-shadow: 1px 1px 5px rgba(0,0,0,0.05); margin: 20px auto;"}
<img src="images/hary.png" alt="Harry Markowitz" style="max-width:100%; height:auto;"/>
:::

<!-- Right: Quote -->

::: {style="flex: 1; min-width:250px; background-color:#fefefe; border-left:4px solid #a5d6a7; padding:14px 20px; font-style:italic; font-size:1.1em; color:#333; border-radius:6px; box-shadow:1px 1px 6px rgba(0,0,0,0.04);"}
```         
“Diversification is the only free lunch in investing.”
```
:::
:::::

::: {style="background-color:#fcfcfc; border:1px solid #ddd; border-radius:6px; padding:14px; max-width:300px; margin: 30px auto 20px auto; box-shadow:1px 1px 6px rgba(0,0,0,0.05); text-align:left;"}
<img src="images/eggs.png" alt="Basket of Eggs" style="max-width:100%; height:auto;"/>
:::

<p style="margin-top:20px;">

Diversification means investing in different assets to reduce the risk of relying on any single one. Since not all assets move together, combining those with different risk and return profiles—especially ones with low correlation—can help smooth out portfolio performance. When one asset drops, another might hold steady or rise, reducing overall volatility and supporting more stable returns.

::: {style="background-color:#fce4ec; border-left:4px solid #f06292; padding:10px 16px; margin: 20px 0; font-size:0.95em; color:#880e4f;"}
Before diversifying a portfolio, correlation analysis helps find assets that don’t move in the same way. This makes it easier to reduce risk by choosing different types of investments. However, correlation can be affected by unusual data points (outliers) and may change over time. For example, during a financial crisis, many assets become more closely linked, which can reduce the benefit of diversification.
:::

## Correlation analysis

Correlation analysis is conducted to identify which assets, when combined in a portfolio, will have a risk-reducing effect.

::: {style="background-color:#fefefe; border-left:4px solid #64b5f6; padding:16px 20px; font-size:1.05em; color:#333; max-width:600px; margin: 30px auto; border-radius:6px; box-shadow:1px 1px 5px rgba(0,0,0,0.04); line-height:1.6;"}
<p style="margin: 0;">

<strong>Low correlation</strong> reduces portfolio volatility.

</p>

<p style="margin: 8px 0 0 0;">

<strong>High correlation</strong> increases portfolio volatility.

</p>
:::

::: {style="background-color:#f0f8ff; border-left:4px solid #64b5f6; padding:10px 14px; font-size:0.95em; color:#333; margin:16px 0;"}
This visualization was chosen because it makes it easy to spot relationships between the stocks at a glance. While we could’ve shown the numbers in a plain table, the color-coded layout provides instant insight without the need to interpret raw values.
:::

```{r message=TRUE}
# Compute Pearson correlation matrix among stock returns
cor_matrix <- cor(returns_combined[, tickers], use = "complete.obs")

# Visualize upper triangle of the correlation matrix 
corrplot(
  cor_matrix,
  method = "color",
  type = "upper",
  tl.col = "black",
  tl.srt = 45,
  addCoef.col = "black"
)

```

Apple (AAPL) and Microsoft (MSFT) show a strong positive correlation (0.73), indicating their daily returns tend to move in the same direction. Tesla (TSLA) is less correlated with both AAPL (0.47) and MSFT (0.43), suggesting it behaves more independently in terms of daily returns.

## Proposed Portfolio

The proposed portfolio allocation of 50% Microsoft, 30% Tesla, and 20% Apple is based on the observed correlation structure among the assets and the goal of achieving effective diversification.

**Note:** While a 50-25-25 split was possible, Tesla's high volatility would raise overall risk. Microsoft was given more weight to stabilize the portfolio.

Microsoft and Apple are highly correlated, which means they tend to move in the same direction. Allocating too much to both would reduce diversification benefits. Therefore, Microsoft is kept as the core low-volatility asset, while Apple’s weight is limited to avoid excessive overlap.

Tesla, on the other hand, has only moderate correlation with both Microsoft and Apple. Including Tesla at a moderate level (30%) enhances diversification and adds growth potential, without excessively increasing portfolio risk.

## Method of Comparison

### Shape Ratio :

The Sharpe ratio is one of the most widely used methods for measuring risk-adjusted relative returns. It compares a fund's historical or projected returns relative to an investment benchmark with the historical or expected variability of such returns.

The higher the ratio, the higher the risk compensation an investment offers. Investors will therefore have a preference for investments with a high Sharpe ratio or investments that raise the entire portfolio's Sharpe ratio through diversification.

::: {style="background-color:#fafafa; border:1px solid #ddd; padding:10px; border-radius:6px; width:550px; text-align:center; box-shadow: 1px 1px 5px rgba(0,0,0,0.05); margin: 20px auto;"}
<img src="images/shaperatio.png" alt="Sharpe Ratio Formula" style="max-width:100%; height:auto;"/>
:::

**Note:** The Sharpe ratio measures how much return a portfolio generates per unit of risk and is commonly used for performance comparisons. It considers all types of volatility. As alternatives, the Sortino ratio focuses only on downside risk, while the Treynor ratio accounts for market risk.

## Hypothesis

Our hypothesis is that the proposed portfolio (50% Microsoft, 30% Tesla, 20% Apple) offers a higher risk-adjusted return than both an equally weighted portfolio and any single-asset portfolio.

To test this, we will compare the Sharpe ratio of our proposed portfolio against :

-   A random portfolio with equal weights across all three assets, and

-   Fully concentrated portfolios consisting of only Microsoft, only Apple, or only Tesla.

```{r}
# Function to calculate and print annualized Sharpe Ratio
portfolio_sharpe <- function(weights, returns_df, label) {
  # Select only numeric return columns (drop Date and HalfYear)
  returns <- returns_df[, sapply(returns_df, is.numeric)]
  mean_ret <- colMeans(returns) * 252            # Annualized mean return
  cov_matrix <- cov(returns) * 252               # Annualized covariance matrix
  port_return <- sum(weights * mean_ret)
  port_volatility <- sqrt(t(weights) %*% cov_matrix %*% weights)
  sharpe_ratio <- port_return / port_volatility
  cat("\n====", label, "====\n")
  cat("Sharpe Ratio: ", round(sharpe_ratio, 2), "\n")
}


# Evaluate Sharpe Ratios for various portfolios
portfolio_sharpe(c(0.50, 0.30, 0.20), returns_df, "Proposed Portfolio")
portfolio_sharpe(rep(1/3, 3), returns_df, "Equal Weights Portfolio")
portfolio_sharpe(c(0, 0, 1), returns_df, "100% Tesla")
portfolio_sharpe(c(0, 1, 0), returns_df, "100% Microsoft")
portfolio_sharpe(c(1, 0, 0), returns_df, "100% Apple")
```

## Which Portfolio Performs Best?

The higher Sharpe ratios observed in strategically allocated portfolios indicate that returns can be enhanced while managing risk more effectively.

Although the proposed portfolio (MSFT 50% – TSLA 30% – AAPL 20%) and the equally weighted portfolio (33.3% each) yielded similar results, this proximity may be considered coincidental.

What truly matters is that the proposed allocation outperforms all single-asset portfolios by a clear margin.

Therefore, allocating assets in a balanced and informed manner is essential for maximizing risk-adjusted returns—confirming the validity of our hypothesis.

## Recommendation

Portfolio diversification should not be based solely on numerical performance indicators; optimal allocation must also consider the investor’s risk tolerance, financial goals, and personal preferences.

For example, an investor with a high risk appetite may reasonably prefer a higher allocation to Tesla, accepting greater volatility in exchange for potentially higher returns. In contrast, a more conservative investor might prioritize stability and allocate more heavily to Microsoft or Apple.

Quantitative results can inform decision-making—but they should be used as a guide, not as a rule.

------------------------------------------------------------------------

# Thank You

Thank you so much for taking the time to read our report. Working on this project taught us a lot—both about finance and how to work with R. We truly hope readers can find something useful or inspiring in it too.

Yaren & Ivan

------------------------------------------------------------------------

# Sources

-   [Testing ChatGPT: Arithmetic vs. Geometric Returns — *TheStreet Retirement Daily*](https://www.thestreet.com/retirement-daily/your-money/testing-chatgpt-arithmetic-vs-geometric-returns)
-   [Harry Markowitz and Modern Portfolio Theory — *Corporate Finance Institute*](https://corporatefinanceinstitute.com/resources/career-map/sell-side/capital-markets/harry-markowitz/)
-   [Sharpe Ratio — *Investopedia*](https://www.investopedia.com/terms/s/sharperatio.asp)
-   [What is CAPM Formula? — *Corporate Finance Institute*](https://corporatefinanceinstitute.com/resources/valuation/what-is-capm-formula/)
