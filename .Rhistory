})
volatility_plot <- plot_ly(data = grouped_data) %>%
add_trace(x = ~HalfYear, y = ~AAPL_SD, name = "AAPL", type = 'scatter', mode = 'lines+markers') %>%
add_trace(x = ~HalfYear, y = ~MSFT_SD, name = "MSFT", type = 'scatter', mode = 'lines+markers') %>%
add_trace(x = ~HalfYear, y = ~TSLA_SD, name = "TSLA", type = 'scatter', mode = 'lines+markers') %>%
add_annotations(
data = event_labels,
x = ~HalfYear,
y = 0,
text = ~label,
showarrow = FALSE,
yanchor = "bottom",
font = list(color = "red", size = 10)
) %>%
layout(
title = "6-Month Volatility by Stock with Key Events",
xaxis = list(title = "Period (Half-Year)", tickangle = -45),
yaxis = list(title = "Volatility (Standard Deviation)"),
legend = list(title = list(text = "Stock")),
shapes = event_lines
)
volatility_plot
mdd_aapl <- maxDrawdown(aapl_prices)
mdd_msft <- maxDrawdown(returns_msft)
mdd_tsla <- maxDrawdown(returns_tsla)
cat("Maximum Drawdown of AAPL:", mdd_aapl, "\n")
cat("Maximum Drawdown of MSFT:", mdd_msft, "\n")
cat("Maximum Drawdown of TSLA:", mdd_tsla, "\n")
return_plot <- plot_ly(data = grouped_data) %>%
add_trace(x = ~HalfYear, y = ~AAPL_Mean, name = "AAPL",
type = 'scatter', mode = 'lines+markers', line = list(color = 'blue')) %>%
add_trace(x = ~HalfYear, y = ~MSFT_Mean, name = "MSFT",
type = 'scatter', mode = 'lines+markers', line = list(color = 'orange')) %>%
add_trace(x = ~HalfYear, y = ~TSLA_Mean, name = "TSLA",
type = 'scatter', mode = 'lines+markers', line = list(color = 'green')) %>%
add_annotations(
data = event_labels,
x = ~HalfYear,
y = 0,
text = ~label,
showarrow = FALSE,
yanchor = "bottom",
font = list(color = "red", size = 12)
) %>%
layout(
title = "6-Month Average Returns by Stock with Key Events",
xaxis = list(title = "Period (Half-Year)", tickangle = -45),
yaxis = list(title = "Average Daily Return", tickformat = ".1%"),
legend = list(title = list(text = "Stock")),
shapes = event_lines,
hovermode = "x unified"
)
return_plot
prices <- merge(Cl(AAPL), Cl(TSLA), Cl(MSFT))
colnames(prices) <- c("AAPL", "TSLA", "MSFT")
returns <- na.omit(ROC(prices, type = "discrete"))
cor_matrix <- cor(returns)
print(cor_matrix)
portfolio_analysis <- function(weights, returns, name) {
mean_ret <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
port_return <- sum(weights * mean_ret)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
port_sharpe <- port_return / port_volatility
cat("\n====", name, "====\n")
cat("Annual Return: ", round(port_return * 100, 2), "%\n")
cat("Annual Volatility: ", round(port_volatility * 100, 2), "%\n")
cat("Sharpe Ratio: ", round(port_sharpe, 2), "\n")
}
portfolio_analysis(c(0.50, 0.30, 0.20), returns, "Low Risk / Stability")
portfolio_analysis(c(0.30, 0.20, 0.50), returns, "Balanced Risk / Return")
portfolio_analysis(c(0.25, 0.50, 0.25), returns, "High Return / High Risk")
portfolio_analysis(c(0.00, 0.15, 0.85), returns, "Maximum Sharpe Ratio")
portfolio_returns <- (returns_aapl + returns_msft + returns_tsla) / 3
cat("Standard Deviation of AAPL:", sd(returns_aapl), "\n")
cat("Standard Deviation of MSFT:", sd(returns_msft), "\n")
cat("Standard Deviation of TSLA:", sd(returns_tsla), "\n")
cat("Standard Deviation of Diversified Portfolio:", sd(portfolio_returns), "\n")
mean_portfolio <- mean(portfolio_returns)
sd_portfolio <- sd(portfolio_returns)
metrics <- data.frame(
Asset = c("Apple", "Microsoft", "Tesla", "Diversified Portfolio"),
Mean_Return = c(mean_return_aapl, mean_return_msft, mean_return_tsla, mean_portfolio),
Standard_Deviation = c(sd_aapl, sd_msft, sd_tsla, sd_portfolio)
)
print(metrics)
plot(metrics$Standard_Deviation, metrics$Mean_Return,
xlab = "Risk (Standard Deviation)",
ylab = "Return (Mean Daily Return)",
main = "Risk-Return Comparison",
pch = 19, col = c("blue", "green", "red", "black"),
xlim = c(0, max(metrics$Standard_Deviation) * 1.1),
ylim = c(0, max(metrics$Mean_Return) * 1.1))
text(metrics$Standard_Deviation, metrics$Mean_Return, labels = metrics$Asset, pos = 4)
t_test_result <- t.test(as.vector(returns_tsla), as.vector(returns_aapl))
print(t_test_result)
# Линейная регрессия доходности Tesla против доходности портфеля
regression_model <- lm(returns_tsla ~ portfolio_returns)
# Вывод результата
summary(regression_model)
mdd_aapl <- maxDrawdown(aapl_prices)
mdd_msft <- maxDrawdown(returns_msft)
mdd_tsla <- maxDrawdown(returns_tsla)
cat("Maximum Drawdown of AAPL:", mdd_aapl, "\n")
cat("Maximum Drawdown of MSFT:", mdd_msft, "\n")
cat("Maximum Drawdown of TSLA:", mdd_tsla, "\n")
#install.packages("PerformanceAnalytics")
library(quantmod)
library(PerformanceAnalytics)
library(ggplot2)
library(dplyr)
library(lubridate)
library(scales)
library(plotly)
symbols <- c("AAPL", "MSFT", "TSLA")
getSymbols(symbols, src = "yahoo", from = "2019-01-01", to = "2024-12-31")
returns_aapl <- dailyReturn(Ad(AAPL))
returns_msft <- dailyReturn(Ad(MSFT))
returns_tsla <- dailyReturn(Ad(TSLA))
aapl_prices <- na.omit(Ad(AAPL))
returns_combined <- merge(returns_aapl, returns_msft, returns_tsla)
colnames(returns_combined) <- c("AAPL", "MSFT", "TSLA")
returns_df <- data.frame(Date = index(returns_combined),
coredata(returns_combined))
returns_df <- returns_df %>%
mutate(HalfYear = paste0(year(Date), " H", ifelse(month(Date) <= 6, 1, 2)))
grouped_data <- returns_df %>%
group_by(HalfYear) %>%
summarise(across(c(AAPL, MSFT, TSLA),
list(Mean = ~mean(.x, na.rm = TRUE),
SD = ~sd(.x, na.rm = TRUE))))
grouped_data$HalfYear <- factor(grouped_data$HalfYear, levels = grouped_data$HalfYear)
event_labels <- data.frame(
HalfYear = c("2020 H1", "2021 H1", "2022 H1", "2023 H1"),
label = c("COVID", "Vaccine", "War", "AI")
)
event_lines <- lapply(event_labels$HalfYear, function(h) {
list(
type = "line",
x0 = h,
x1 = h,
y0 = 0,
y1 = 1,
xref = "x",
yref = "paper",
line = list(color = "red", dash = "dash", width = 0.5)
)
})
volatility_plot <- plot_ly(data = grouped_data) %>%
add_trace(x = ~HalfYear, y = ~AAPL_SD, name = "AAPL", type = 'scatter', mode = 'lines+markers') %>%
add_trace(x = ~HalfYear, y = ~MSFT_SD, name = "MSFT", type = 'scatter', mode = 'lines+markers') %>%
add_trace(x = ~HalfYear, y = ~TSLA_SD, name = "TSLA", type = 'scatter', mode = 'lines+markers') %>%
add_annotations(
data = event_labels,
x = ~HalfYear,
y = 0,
text = ~label,
showarrow = FALSE,
yanchor = "bottom",
font = list(color = "red", size = 10)
) %>%
layout(
title = "6-Month Volatility by Stock with Key Events",
xaxis = list(title = "Period (Half-Year)", tickangle = -45),
yaxis = list(title = "Volatility (Standard Deviation)"),
legend = list(title = list(text = "Stock")),
shapes = event_lines
)
volatility_plot
mdd_aapl <- maxDrawdown(aapl_prices)
mdd_msft <- maxDrawdown(returns_msft)
mdd_tsla <- maxDrawdown(returns_tsla)
cat("Maximum Drawdown of AAPL:", mdd_aapl, "\n")
cat("Maximum Drawdown of MSFT:", mdd_msft, "\n")
cat("Maximum Drawdown of TSLA:", mdd_tsla, "\n")
return_plot <- plot_ly(data = grouped_data) %>%
add_trace(x = ~HalfYear, y = ~AAPL_Mean, name = "AAPL",
type = 'scatter', mode = 'lines+markers', line = list(color = 'blue')) %>%
add_trace(x = ~HalfYear, y = ~MSFT_Mean, name = "MSFT",
type = 'scatter', mode = 'lines+markers', line = list(color = 'orange')) %>%
add_trace(x = ~HalfYear, y = ~TSLA_Mean, name = "TSLA",
type = 'scatter', mode = 'lines+markers', line = list(color = 'green')) %>%
add_annotations(
data = event_labels,
x = ~HalfYear,
y = 0,
text = ~label,
showarrow = FALSE,
yanchor = "bottom",
font = list(color = "red", size = 12)
) %>%
layout(
title = "6-Month Average Returns by Stock with Key Events",
xaxis = list(title = "Period (Half-Year)", tickangle = -45),
yaxis = list(title = "Average Daily Return", tickformat = ".1%"),
legend = list(title = list(text = "Stock")),
shapes = event_lines,
hovermode = "x unified"
)
return_plot
prices <- merge(Cl(AAPL), Cl(TSLA), Cl(MSFT))
colnames(prices) <- c("AAPL", "TSLA", "MSFT")
returns <- na.omit(ROC(prices, type = "discrete"))
cor_matrix <- cor(returns)
print(cor_matrix)
portfolio_analysis <- function(weights, returns, name) {
mean_ret <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
port_return <- sum(weights * mean_ret)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
port_sharpe <- port_return / port_volatility
cat("\n====", name, "====\n")
cat("Annual Return: ", round(port_return * 100, 2), "%\n")
cat("Annual Volatility: ", round(port_volatility * 100, 2), "%\n")
cat("Sharpe Ratio: ", round(port_sharpe, 2), "\n")
}
portfolio_analysis(c(0.50, 0.30, 0.20), returns, "Low Risk / Stability")
portfolio_analysis(c(0.30, 0.20, 0.50), returns, "Balanced Risk / Return")
portfolio_analysis(c(0.25, 0.50, 0.25), returns, "High Return / High Risk")
portfolio_analysis(c(0.00, 0.15, 0.85), returns, "Maximum Sharpe Ratio")
portfolio_returns <- (returns_aapl + returns_msft + returns_tsla) / 3
cat("Standard Deviation of AAPL:", sd(returns_aapl), "\n")
cat("Standard Deviation of MSFT:", sd(returns_msft), "\n")
cat("Standard Deviation of TSLA:", sd(returns_tsla), "\n")
cat("Standard Deviation of Diversified Portfolio:", sd(portfolio_returns), "\n")
t_test_result <- t.test(as.vector(returns_tsla), as.vector(returns_aapl))
print(t_test_result)
# Линейная регрессия доходности Tesla против доходности портфеля
regression_model <- lm(returns_tsla ~ portfolio_returns)
# Вывод результата
summary(regression_model)
mdd_aapl <- maxDrawdown(aapl_prices)
mdd_msft <- maxDrawdown(returns_msft)
mdd_tsla <- maxDrawdown(returns_tsla)
cat("Maximum Drawdown of AAPL:", mdd_aapl, "\n")
cat("Maximum Drawdown of MSFT:", mdd_msft, "\n")
cat("Maximum Drawdown of TSLA:", mdd_tsla, "\n")
mdd_aapl <- maxDrawdown(returns_aapl, invert = FALSE)
mdd_msft <- maxDrawdown(returns_msft, invert = FALSE)
mdd_tsla <- maxDrawdown(returns_tsla, invert = FALSE)
cat("Maximum Drawdown of AAPL:", mdd_aapl, "\n")
cat("Maximum Drawdown of MSFT:", mdd_msft, "\n")
cat("Maximum Drawdown of TSLA:", mdd_tsla, "\n")
portfolio_sharpe <- function(weights, returns, name) {
mean_ret <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
port_return <- sum(weights * mean_ret)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
port_sharpe <- port_return / port_volatility
cat("\n====", name, "====\n")
cat("Sharpe Ratio: ", round(port_sharpe, 2), "\n")
}
portfolio_sharpe <- function(weights, returns, name) {
mean_ret <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
port_return <- sum(weights * mean_ret)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
port_sharpe <- port_return / port_volatility
cat("\n====", name, "====\n")
cat("Sharpe Ratio: ", round(port_sharpe, 2), "\n")
}
portfolio_sharpe(c(0.50, 0.30, 0.20), returns, "Low Risk / Stability")
portfolio_sharpe(c(0.30, 0.20, 0.50), returns, "Balanced Risk / Return")
portfolio_sharpe(c(0.25, 0.50, 0.25), returns, "High Return / High Risk")
portfolio_sharpe(c(0.00, 0.15, 0.85), returns, "Maximum Sharpe Ratio")
portfolio_sharpe <- function(weights, returns, name) {
mean_ret <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
port_return <- sum(weights * mean_ret)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
port_sharpe <- port_return / port_volatility
cat("\n====", name, "====\n")
cat("Sharpe Ratio: ", round(port_sharpe, 2), "\n")
}
portfolio_sharpe(c(0.40, 0.40, 0.20), returns, "Minimum Risk Diversified")
portfolio_sharpe(c(0.60, 0.25, 0.15), returns, "Optimal Sharpe (Balanced)")
portfolio_sharpe(c(0.15, 0.25, 0.60), returns, "High Return / High Risk")
portfolio_sharpe <- function(weights, returns, name) {
mean_ret <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
port_return <- sum(weights * mean_ret)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
port_sharpe <- port_return / port_volatility
cat("\n====", name, "====\n")
cat("Sharpe Ratio: ", round(port_sharpe, 2), "\n")
}
portfolio_sharpe(c(0.40, 0.40, 0.20), returns, "Minimum Risk Diversified")
portfolio_sharpe(c(0.60, 0.25, 0.15), returns, "Optimal Sharpe (Balanced)")
portfolio_sharpe(c(0.15, 0.25, 0.60), returns, "High Return / High Risk")
portfolio_sharpe(c(1, 0, 0), returns, "High Return / High Risk")
portfolio_sharpe <- function(weights, returns, name) {
mean_ret <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
port_return <- sum(weights * mean_ret)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
port_sharpe <- port_return / port_volatility
cat("\n====", name, "====\n")
cat("Sharpe Ratio: ", round(port_sharpe, 2), "\n")
}
portfolio_sharpe(c(0.40, 0.40, 0.20), returns, "Minimum Risk Diversified")
portfolio_sharpe(c(0.60, 0.25, 0.15), returns, "Optimal Sharpe (Balanced)")
portfolio_sharpe(c(0.15, 0.25, 0.60), returns, "High Return / High Risk")
portfolio_sharpe(c(0.00, 0.00, 1.00), returns, "100% Tesla")
portfolio_sharpe <- function(weights, returns, name) {
mean_ret <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
port_return <- sum(weights * mean_ret)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
port_sharpe <- port_return / port_volatility
cat("\n====", name, "====\n")
cat("Sharpe Ratio: ", round(port_sharpe, 2), "\n")
}
portfolio_sharpe(c(0.50, 0.30, 0.20), returns, "Minimum Risk Diversified")
portfolio_sharpe(c(0.00, 0.00, 1.00), returns, "100% Tesla")
portfolio_sharpe <- function(weights, returns, name) {
mean_ret <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
port_return <- sum(weights * mean_ret)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
port_sharpe <- port_return / port_volatility
cat("\n====", name, "====\n")
cat("Sharpe Ratio: ", round(port_sharpe, 2), "\n")
}
portfolio_sharpe(c(0.50, 0.30, 0.20), returns, "proposed portfolio")
portfolio_sharpe(c(0.33, 0.33, 0.33), returns, "random portfolio")
portfolio_sharpe(c(0.00, 0.00, 1.00), returns, "100% Tesla")
portfolio_sharpe <- function(weights, returns, name) {
mean_ret <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
port_return <- sum(weights * mean_ret)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
port_sharpe <- port_return / port_volatility
cat("\n====", name, "====\n")
cat("Sharpe Ratio: ", round(port_sharpe, 2), "\n")
}
portfolio_sharpe(c(0.50, 0.30, 0.20), returns, "Proposed Portfolio")
portfolio_sharpe(c(0.33, 0.33, 0.33), returns, "Random Portfolio")
portfolio_sharpe(c(0.00, 0.00, 1.00), returns, "100% Tesla")
portfolio_sharpe <- function(weights, returns, name) {
mean_ret <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
port_return <- sum(weights * mean_ret)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
port_sharpe <- port_return / port_volatility
cat("\n====", name, "====\n")
cat("Sharpe Ratio: ", round(port_sharpe, 2), "\n")
}
portfolio_sharpe(c(0.50, 0.30, 0.20), returns, "Proposed Portfolio")
portfolio_sharpe(c(0.33, 0.33, 0.33), returns, "Random Portfolio")
portfolio_sharpe(c(0.00, 0.00, 1.00), returns, "100% Tesla")
portfolio_sharpe(c(0.00, 1.00, .00), returns, "100% Tesla")
portfolio_sharpe <- function(weights, returns, name) {
mean_ret <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
port_return <- sum(weights * mean_ret)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
port_sharpe <- port_return / port_volatility
cat("\n====", name, "====\n")
cat("Sharpe Ratio: ", round(port_sharpe, 2), "\n")
}
portfolio_sharpe(c(0.50, 0.30, 0.20), returns, "Proposed Portfolio")
portfolio_sharpe(c(0.33, 0.33, 0.33), returns, "Random Portfolio")
portfolio_sharpe(c(0.00, 0.00, 1.00), returns, "100% Tesla")
portfolio_sharpe(c(0.00, 1.00, 0.00), returns, "100% Tesla")
portfolio_sharpe(c(1.00, 0.00, 0.00), returns, "100% Tesla")
portfolio_sharpe <- function(weights, returns, name) {
mean_ret <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
port_return <- sum(weights * mean_ret)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
port_sharpe <- port_return / port_volatility
cat("\n====", name, "====\n")
cat("Sharpe Ratio: ", round(port_sharpe, 2), "\n")
}
portfolio_sharpe(c(0.50, 0.30, 0.20), returns, "Proposed Portfolio")
portfolio_sharpe(c(0.33, 0.33, 0.33), returns, "Random Portfolio")
portfolio_sharpe(c(0.00, 0.00, 1.00), returns, "100% Tesla")
portfolio_sharpe(c(0.00, 1.00, 0.00), returns, "100% Apple")
portfolio_sharpe(c(1.00, 0.00, 0.00), returns, "100% Microsoft")
#install.packages("PerformanceAnalytics")
library(quantmod)
library(PerformanceAnalytics)
library(ggplot2)
library(dplyr)
library(lubridate)
library(scales)
library(plotly)
symbols <- c("AAPL", "MSFT", "TSLA")
getSymbols(symbols, src = "yahoo", from = "2019-01-01", to = "2024-12-31")
returns_aapl <- dailyReturn(Ad(AAPL))
returns_msft <- dailyReturn(Ad(MSFT))
returns_tsla <- dailyReturn(Ad(TSLA))
returns_combined <- merge(returns_aapl, returns_msft, returns_tsla)
colnames(returns_combined) <- c("AAPL", "MSFT", "TSLA")
returns_df <- data.frame(Date = index(returns_combined),
coredata(returns_combined))
returns_df <- returns_df %>%
mutate(HalfYear = paste0(year(Date), " H", ifelse(month(Date) <= 6, 1, 2)))
grouped_data <- returns_df %>%
group_by(HalfYear) %>%
summarise(across(c(AAPL, MSFT, TSLA),
list(Mean = ~mean(.x, na.rm = TRUE),
SD = ~sd(.x, na.rm = TRUE))))
grouped_data$HalfYear <- factor(grouped_data$HalfYear, levels = grouped_data$HalfYear)
event_labels <- data.frame(
HalfYear = c("2020 H1", "2021 H1", "2022 H1", "2023 H1"),
label = c("COVID", "Vaccine", "War", "AI")
)
event_lines <- lapply(event_labels$HalfYear, function(h) {
list(
type = "line",
x0 = h,
x1 = h,
y0 = 0,
y1 = 1,
xref = "x",
yref = "paper",
line = list(color = "red", dash = "dash", width = 0.5)
)
})
volatility_plot <- plot_ly(data = grouped_data) %>%
add_trace(x = ~HalfYear, y = ~AAPL_SD, name = "AAPL", type = 'scatter', mode = 'lines+markers') %>%
add_trace(x = ~HalfYear, y = ~MSFT_SD, name = "MSFT", type = 'scatter', mode = 'lines+markers') %>%
add_trace(x = ~HalfYear, y = ~TSLA_SD, name = "TSLA", type = 'scatter', mode = 'lines+markers') %>%
add_annotations(
data = event_labels,
x = ~HalfYear,
y = 0,
text = ~label,
showarrow = FALSE,
yanchor = "bottom",
font = list(color = "red", size = 10)
) %>%
layout(
title = "6-Month Volatility by Stock with Key Events",
xaxis = list(title = "Period (Half-Year)", tickangle = -45),
yaxis = list(title = "Volatility (Standard Deviation)"),
legend = list(title = list(text = "Stock")),
shapes = event_lines
)
volatility_plot
mdd_aapl <- maxDrawdown(returns_aapl, invert = FALSE)
mdd_msft <- maxDrawdown(returns_msft, invert = FALSE)
mdd_tsla <- maxDrawdown(returns_tsla, invert = FALSE)
cat("Maximum Drawdown of AAPL:", mdd_aapl, "\n")
cat("Maximum Drawdown of MSFT:", mdd_msft, "\n")
cat("Maximum Drawdown of TSLA:", mdd_tsla, "\n")
return_plot <- plot_ly(data = grouped_data) %>%
add_trace(x = ~HalfYear, y = ~AAPL_Mean, name = "AAPL",
type = 'scatter', mode = 'lines+markers', line = list(color = 'blue')) %>%
add_trace(x = ~HalfYear, y = ~MSFT_Mean, name = "MSFT",
type = 'scatter', mode = 'lines+markers', line = list(color = 'orange')) %>%
add_trace(x = ~HalfYear, y = ~TSLA_Mean, name = "TSLA",
type = 'scatter', mode = 'lines+markers', line = list(color = 'green')) %>%
add_annotations(
data = event_labels,
x = ~HalfYear,
y = 0,
text = ~label,
showarrow = FALSE,
yanchor = "bottom",
font = list(color = "red", size = 12)
) %>%
layout(
title = "6-Month Average Returns by Stock with Key Events",
xaxis = list(title = "Period (Half-Year)", tickangle = -45),
yaxis = list(title = "Average Daily Return", tickformat = ".1%"),
legend = list(title = list(text = "Stock")),
shapes = event_lines,
hovermode = "x unified"
)
return_plot
prices <- merge(Cl(AAPL), Cl(TSLA), Cl(MSFT))
colnames(prices) <- c("AAPL", "TSLA", "MSFT")
returns <- na.omit(ROC(prices, type = "discrete"))
cor_matrix <- cor(returns)
print(cor_matrix)
portfolio_sharpe <- function(weights, returns, name) {
mean_ret <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
port_return <- sum(weights * mean_ret)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
port_sharpe <- port_return / port_volatility
cat("\n====", name, "====\n")
cat("Sharpe Ratio: ", round(port_sharpe, 2), "\n")
}
portfolio_sharpe(c(0.50, 0.30, 0.20), returns, "Proposed Portfolio")
portfolio_sharpe(c(0.33, 0.33, 0.33), returns, "Random Portfolio")
portfolio_sharpe(c(0.00, 0.00, 1.00), returns, "100% Tesla")
portfolio_sharpe(c(0.00, 1.00, 0.00), returns, "100% Apple")
portfolio_sharpe(c(1.00, 0.00, 0.00), returns, "100% Microsoft")
# This function comes from the PerformanceAnalytics package and measures the largest loss
mdd_aapl <- maxDrawdown(returns_aapl, invert = FALSE)
mdd_msft <- maxDrawdown(returns_msft, invert = FALSE)
mdd_tsla <- maxDrawdown(returns_tsla, invert = FALSE)
cat("Maximum Drawdown of AAPL:", mdd_aapl, "\n")
cat("Maximum Drawdown of MSFT:", mdd_msft, "\n")
cat("Maximum Drawdown of TSLA:", mdd_tsla, "\n")
