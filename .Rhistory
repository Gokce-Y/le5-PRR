aes(x = HalfYear, y = 0, label = label),
inherit.aes = FALSE,
vjust = 1.5, hjust = 0.5, color = "red", size = 3.5) +
labs(title = "6-Month Geometric Average Returns by Stock with Key Events",
x = "Period (Half-Year)",
y = "Geometric Average Daily Return",
color = "Stock") +
scale_y_continuous(labels = percent) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
returns_aapl <- dailyReturn(Ad(AAPL))
returns_msft <- dailyReturn(Ad(MSFT))
returns_tsla <- dailyReturn(Ad(TSLA))
grouped_data$HalfYear <- factor(grouped_data$HalfYear, levels = grouped_data$HalfYear)
event_labels <- data.frame(
HalfYear = c("2020 H1", "2021 H1", "2022 H1", "2022 H2", "2023 H1"),
label = c("COVID", "Vaccine", "War", "Inflation", "AI")
)
ggplot(grouped_data, aes(x = HalfYear)) +
geom_line(aes(y = AAPL_Mean, color = "AAPL"), group = 1, size = 1) +
geom_line(aes(y = MSFT_Mean, color = "MSFT"), group = 2, size = 1) +
geom_line(aes(y = TSLA_Mean, color = "TSLA"), group = 3, size = 1) +
geom_point(aes(y = AAPL_Mean, color = "AAPL"), size = 2) +
geom_point(aes(y = MSFT_Mean, color = "MSFT"), size = 2) +
geom_point(aes(y = TSLA_Mean, color = "TSLA"), size = 2) +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
geom_vline(xintercept = which(grouped_data$HalfYear %in% event_labels$HalfYear),
linetype = "dashed", color = "red", size = 0.5) +
geom_text(data = event_labels,
aes(x = HalfYear, y = 0, label = label),
inherit.aes = FALSE,
angle = 0, vjust = 1.5, hjust = 0.5, color = "red", size = 3.5) +
labs(title = "6-Month Average Returns by Stock with Key Events",
x = "Period (Half-Year)",
y = "Average Daily Return",
color = "Stock") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::percent)
ggplot(grouped_data, aes(x = HalfYear)) +
geom_line(aes(y = AAPL_Geo, color = "AAPL"), size = 1) +
geom_line(aes(y = MSFT_Geo, color = "MSFT"), size = 1) +
geom_line(aes(y = TSLA_Geo, color = "TSLA"), size = 1) +
geom_point(aes(y = AAPL_Geo, color = "AAPL"), size = 2) +
geom_point(aes(y = MSFT_Geo, color = "MSFT"), size = 2) +
geom_point(aes(y = TSLA_Geo, color = "TSLA"), size = 2) +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
geom_vline(xintercept = which(grouped_data$HalfYear %in% event_labels$HalfYear),
linetype = "dashed", color = "red", size = 0.5) +
geom_text(data = event_labels,
aes(x = HalfYear, y = 0, label = label),
inherit.aes = FALSE,
vjust = 1.5, hjust = 0.5, color = "red", size = 3.5) +
labs(title = "6-Month Geometric Average Returns by Stock with Key Events",
x = "Period (Half-Year)",
y = "Geometric Average Daily Return",
color = "Stock") +
scale_y_continuous(labels = percent) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
Derken 2023’te yapay zekâ yükseldi. Microsoft, OpenAI ortaklığıyla öne çıktı. Tesla, otonom teknolojilerle yine dikkat çekti. Apple her zamanki gibi istikrarını korudu. Teknoloji, bir kez daha geleceğe yön vermeye başladı.
grouped_data$HalfYear <- factor(grouped_data$HalfYear, levels = grouped_data$HalfYear)
event_labels <- data.frame(
HalfYear = c("2020 H1", "2021 H1", "2022 H1", "2022 H2", "2023 H1"),
label = c("COVID", "Vaccine", "War", "Inflation", "AI")
)
volatility_plot <- ggplot(grouped_data, aes(x = HalfYear)) +
geom_point(aes(y = AAPL_SD, color = "AAPL"), size = 3) +
geom_point(aes(y = MSFT_SD, color = "MSFT"), size = 3) +
geom_point(aes(y = TSLA_SD, color = "TSLA"), size = 3) +
geom_line(aes(y = AAPL_SD, group = 1, color = "AAPL")) +
geom_line(aes(y = MSFT_SD, group = 2, color = "MSFT")) +
geom_line(aes(y = TSLA_SD, group = 3, color = "TSLA")) +
geom_vline(xintercept = which(grouped_data$HalfYear %in% event_labels$HalfYear),
linetype = "dashed", color = "red", size = 0.6) +
geom_text(data = event_labels,
aes(x = HalfYear, y = 0, label = label),
inherit.aes = FALSE,
angle = 0, vjust = 1.5, hjust = 0.5, color = "red", size = 3.5) +
labs(title = "6-Month Volatility (Standard Deviation) and Key Events",
subtitle = "Periodical volatility comparison of AAPL, MSFT, and TSLA",
x = "Period (Half-Year)",
y = "Standard Deviation (Volatility)",
color = "Stock") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grouped_data$HalfYear <- factor(grouped_data$HalfYear, levels = grouped_data$HalfYear)
event_labels <- data.frame(
HalfYear = c("2020 H1", "2021 H1", "2022 H1", "2022 H2", "2023 H1"),
label = c("COVID", "Vaccine", "War", "Inflation", "AI")
)
volatility_plot <- ggplot(grouped_data, aes(x = HalfYear)) +
geom_point(aes(y = AAPL_SD, color = "AAPL"), size = 3) +
geom_point(aes(y = MSFT_SD, color = "MSFT"), size = 3) +
geom_point(aes(y = TSLA_SD, color = "TSLA"), size = 3) +
geom_line(aes(y = AAPL_SD, group = 1, color = "AAPL")) +
geom_line(aes(y = MSFT_SD, group = 2, color = "MSFT")) +
geom_line(aes(y = TSLA_SD, group = 3, color = "TSLA")) +
geom_vline(xintercept = which(grouped_data$HalfYear %in% event_labels$HalfYear),
linetype = "dashed", color = "red", size = 0.6) +
geom_text(data = event_labels,
aes(x = HalfYear, y = 0, label = label),
inherit.aes = FALSE,
angle = 0, vjust = 1.5, hjust = 0.5, color = "red", size = 3.5) +
labs(title = "6-Month Volatility (Standard Deviation) and Key Events",
subtitle = "Periodical volatility comparison of AAPL, MSFT, and TSLA",
x = "Period (Half-Year)",
y = "Standard Deviation (Volatility)",
color = "Stock") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
volatility_plot
grouped_data$HalfYear <- factor(grouped_data$HalfYear, levels = grouped_data$HalfYear)
event_labels <- data.frame(
HalfYear = c("2020 H1", "2021 H1", "2022 H1", "2022 H2", "2023 H1"),
label = c("COVID", "Vaccine", "War", "Inflation", "AI")
)
ggplot(grouped_data, aes(x = HalfYear)) +
geom_line(aes(y = AAPL_Mean, color = "AAPL"), group = 1, size = 1) +
geom_line(aes(y = MSFT_Mean, color = "MSFT"), group = 2, size = 1) +
geom_line(aes(y = TSLA_Mean, color = "TSLA"), group = 3, size = 1) +
geom_point(aes(y = AAPL_Mean, color = "AAPL"), size = 2) +
geom_point(aes(y = MSFT_Mean, color = "MSFT"), size = 2) +
geom_point(aes(y = TSLA_Mean, color = "TSLA"), size = 2) +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
geom_vline(xintercept = which(grouped_data$HalfYear %in% event_labels$HalfYear),
linetype = "dashed", color = "red", size = 0.5) +
geom_text(data = event_labels,
aes(x = HalfYear, y = 0, label = label),
inherit.aes = FALSE,
angle = 0, vjust = 1.5, hjust = 0.5, color = "red", size = 3.5) +
labs(title = "6-Month Average Returns by Stock with Key Events",
x = "Period (Half-Year)",
y = "Average Daily Return",
color = "Stock") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::percent)
volatility_plot
grouped_data$HalfYear <- factor(grouped_data$HalfYear, levels = grouped_data$HalfYear)
event_labels <- data.frame(
HalfYear = c("2020 H1", "2021 H1", "2022 H1", "2022 H2", "2023 H1"),
label = c("COVID", "Vaccine", "War", "Inflation", "AI")
)
return_plot <- ggplot(grouped_data, aes(x = HalfYear)) +
geom_line(aes(y = AAPL_Mean, color = "AAPL"), group = 1, size = 1) +
geom_line(aes(y = MSFT_Mean, color = "MSFT"), group = 2, size = 1) +
geom_line(aes(y = TSLA_Mean, color = "TSLA"), group = 3, size = 1) +
geom_point(aes(y = AAPL_Mean, color = "AAPL"), size = 2) +
geom_point(aes(y = MSFT_Mean, color = "MSFT"), size = 2) +
geom_point(aes(y = TSLA_Mean, color = "TSLA"), size = 2) +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
geom_vline(xintercept = which(grouped_data$HalfYear %in% event_labels$HalfYear),
linetype = "dashed", color = "red", size = 0.5) +
geom_text(data = event_labels,
aes(x = HalfYear, y = 0, label = label),
inherit.aes = FALSE,
angle = 0, vjust = 1.5, hjust = 0.5, color = "red", size = 3.5) +
labs(title = "6-Month Average Returns by Stock with Key Events",
x = "Period (Half-Year)",
y = "Average Daily Return",
color = "Stock") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::percent)
return_plot
return_plot
volatility_plot
grouped_data$HalfYear <- factor(grouped_data$HalfYear, levels = grouped_data$HalfYear)
event_labels <- data.frame(
HalfYear = c("2020 H1", "2021 H1", "2022 H1", "2022 H2", "2023 H1"),
label = c("COVID", "Vaccine", "War", "Inflation", "AI")
)
return_plot <- ggplot(grouped_data, aes(x = HalfYear)) +
geom_line(aes(y = AAPL_Mean, color = "AAPL"), size = 1) +
geom_line(aes(y = MSFT_Mean, color = "MSFT"), size = 1) +
geom_line(aes(y = TSLA_Mean, color = "TSLA"), size = 1) +
geom_point(aes(y = AAPL_Mean, color = "AAPL"), size = 2) +
geom_point(aes(y = MSFT_Mean, color = "MSFT"), size = 2) +
geom_point(aes(y = TSLA_Mean, color = "TSLA"), size = 2) +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
geom_vline(
xintercept = which(grouped_data$HalfYear %in% event_labels$HalfYear),
linetype = "dashed", color = "red", size = 0.5
) +
geom_text(
data = event_labels,
aes(x = HalfYear, y = 0, label = label),
inherit.aes = FALSE,
angle = 0, vjust = 1.5, hjust = 0.5,
color = "red", size = 3.5
) +
labs(
title = "6-Month Average Returns by Stock with Key Events",
x = "Period (Half-Year)",
y = "Average Daily Return",
color = "Stock"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
) +
scale_y_continuous(labels = scales::percent)
return_plot
grouped_data$HalfYear <- factor(grouped_data$HalfYear, levels = grouped_data$HalfYear)
event_labels <- data.frame(
HalfYear = c("2020 H1", "2021 H1", "2022 H1", "2022 H2", "2023 H1"),
label = c("COVID", "Vaccine", "War", "Inflation", "AI")
)
return_plot <- ggplot(grouped_data, aes(x = HalfYear)) +
geom_line(aes(y = AAPL_Mean, color = "AAPL"), group = 1, size = 1) +
geom_line(aes(y = MSFT_Mean, color = "MSFT"), group = 2, size = 1) +
geom_line(aes(y = TSLA_Mean, color = "TSLA"), group = 3, size = 1) +
geom_point(aes(y = AAPL_Mean, color = "AAPL"), size = 2) +
geom_point(aes(y = MSFT_Mean, color = "MSFT"), size = 2) +
geom_point(aes(y = TSLA_Mean, color = "TSLA"), size = 2) +
geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
geom_vline(
xintercept = which(grouped_data$HalfYear %in% event_labels$HalfYear),
linetype = "dashed", color = "red", size = 0.5
) +
geom_text(
data = event_labels,
aes(x = HalfYear, y = 0, label = label),
inherit.aes = FALSE,
angle = 0, vjust = 1.5, hjust = 0.5,
color = "red", size = 3.5
) +
labs(
title = "6-Month Average Returns by Stock with Key Events",
x = "Period (Half-Year)",
y = "Average Daily Return",
color = "Stock"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::percent)
return_plot
grouped_data$HalfYear <- factor(grouped_data$HalfYear, levels = grouped_data$HalfYear)
event_labels <- data.frame(
HalfYear = c("2020 H1", "2021 H1", "2022 H1", "2022 H2", "2023 H1"),
label = c("COVID", "Vaccine", "War", "Inflation", "AI")
)
volatility_plot <- ggplot(grouped_data, aes(x = HalfYear)) +
geom_line(aes(y = AAPL_SD, color = "AAPL"), group = 1, size = 1) +
geom_line(aes(y = MSFT_SD, color = "MSFT"), group = 2, size = 1) +
geom_line(aes(y = TSLA_SD, color = "TSLA"), group = 3, size = 1) +
geom_point(aes(y = AAPL_SD, color = "AAPL"), size = 2) +
geom_point(aes(y = MSFT_SD, color = "MSFT"), size = 2) +
geom_point(aes(y = TSLA_SD, color = "TSLA"), size = 2) +
geom_vline(
xintercept = which(grouped_data$HalfYear %in% event_labels$HalfYear),
linetype = "dashed", color = "red", size = 0.5
) +
geom_text(
data = event_labels,
aes(x = HalfYear, y = 0, label = label),
inherit.aes = FALSE,
angle = 0, vjust = 1.5, hjust = 0.5,
color = "red", size = 3.5
) +
labs(
title = "6-Month Volatility by Stock with Key Events",
subtitle = "Standard Deviation of Daily Returns for AAPL, MSFT, and TSLA",
x = "Period (Half-Year)",
y = "Volatility (Standard Deviation)",
color = "Stock"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
volatility_plot
return_plot
volatility_plot
prices <- merge(Cl(AAPL), Cl(TSLA), Cl(MSFT))
colnames(prices) <- c("AAPL", "TSLA", "MSFT")
returns <- na.omit(ROC(prices, type = "discrete"))
cor_matrix <- cor(returns)
print(cor_matrix)
portfolio_analysis <- function(weights, returns, name) {
mean_ret <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
port_return <- sum(weights * mean_ret)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
port_sharpe <- port_return / port_volatility
cat("\n====", name, "====\n")
cat("Annual Return: ", round(port_return * 100, 2), "%\n")
cat("Annual Volatility: ", round(port_volatility * 100, 2), "%\n")
cat("Sharpe Ratio: ", round(port_sharpe, 2), "\n")
}
# Portfolio Scenarios
portfolio_analysis(c(0.50, 0.00, 0.50), returns, "Low Risk / Stability")
portfolio_analysis(c(0.30, 0.20, 0.50), returns, "Balanced Risk / Return")
portfolio_analysis(c(0.25, 0.50, 0.25), returns, "High Return / High Risk")
portfolio_analysis(c(0.00, 0.15, 0.85), returns, "Maximum Sharpe Ratio")
weights <- c(0.30, 0.20, 0.50)  # AAPL, TSLA, MSFT
# Portföy getirisi
portfolio_returns <- returns_aapl * 0.30 + returns_tsla * 0.20 + returns_msft * 0.50
lm(returns_aapl ~ portfolio_returns)
lm(returns_tsla ~ portfolio_returns)
lm(returns_msft ~ portfolio_returns)
weights <- c(0.30, 0.20, 0.50)  # AAPL, TSLA, MSFT
portfolio_returns <- returns_aapl * 0.30 + returns_tsla * 0.20 + returns_msft * 0.50
lm(returns_aapl ~ portfolio_returns)
lm(returns_tsla ~ portfolio_returns)
lm(returns_msft ~ portfolio_returns)
print_regression_summary <- function(stock_name, stock_returns, portfolio_returns) {
model <- lm(stock_returns ~ portfolio_returns)
model_summary <- summary(model)
model_confint <- confint(model)
beta <- model_summary$coefficients[2, 1]
t_value <- model_summary$coefficients[2, 3]
p_value <- model_summary$coefficients[2, 4]
conf_low <- model_confint[2, 1]
conf_high <- model_confint[2, 2]
r_squared <- model_summary$r.squared * 100
cat("========================================\n")
cat("        REGRESSION SUMMARY -", stock_name, "\n")
cat("========================================\n")
cat(sprintf("%-25s: %.4f\n", "Beta", beta))
cat(sprintf("%-25s: %.2f\n", "t-value", t_value))
cat(sprintf("%-25s: %.4g\n", "p-value", p_value))
cat(sprintf("%-25s: [%.4f , %.4f]\n", "95% Confidence Interval", conf_low, conf_high))
cat(sprintf("%-25s: %.2f%%\n", "R-squared", r_squared))
cat("========================================\n\n")
}
weights <- c(0.30, 0.20, 0.50)
portfolio_returns <- returns_aapl * weights[1] + returns_tsla * weights[2] + returns_msft * weights[3]
print_regression_summary("AAPL", returns_aapl, portfolio_returns)
print_regression_summary("TSLA", returns_tsla, portfolio_returns)
print_regression_summary("MSFT", returns_msft, portfolio_returns)
mean_portfolio <- mean(portfolio_returns)
sd_portfolio <- sd(portfolio_returns)
metrics <- data.frame(
Asset = c("Apple", "Microsoft", "Tesla", "Diversified Portfolio"),
Mean_Return = c(mean_return_aapl, mean_return_msft, mean_return_tsla, mean_portfolio),
Standard_Deviation = c(sd_aapl, sd_msft, sd_tsla, sd_portfolio)
)
print(metrics)
plot(metrics$Standard_Deviation, metrics$Mean_Return,
xlab = "Risk (Standard Deviation)",
ylab = "Return (Mean Daily Return)",
main = "Risk-Return Comparison",
pch = 19, col = c("blue", "green", "red", "black"),
xlim = c(0, max(metrics$Standard_Deviation) * 1.1),
ylim = c(0, max(metrics$Mean_Return) * 1.1))
text(metrics$Standard_Deviation, metrics$Mean_Return, labels = metrics$Asset, pos = 4)
t_test_result <- t.test(as.vector(returns_tsla), as.vector(returns_aapl))
print(t_test_result)
portfolio_analysis <- function(weights, returns, name) {
mean_ret <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
port_return <- sum(weights * mean_ret)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
port_sharpe <- port_return / port_volatility
cat("\n====", name, "====\n")
cat("Annual Return: ", round(port_return * 100, 2), "%\n")
cat("Annual Volatility: ", round(port_volatility * 100, 2), "%\n")
cat("Sharpe Ratio: ", round(port_sharpe, 2), "\n")
}
portfolio_analysis(c(0.50, 0.30, 0.20), returns, "Low Risk / Stability")
portfolio_analysis(c(0.30, 0.20, 0.50), returns, "Balanced Risk / Return")
portfolio_analysis(c(0.25, 0.50, 0.25), returns, "High Return / High Risk")
portfolio_analysis(c(0.00, 0.15, 0.85), returns, "Maximum Sharpe Ratio")
# Fonksiyon: kullanıcıdan girdi al, ağırlıkları kontrol et, analiz yap
run_portfolio_analysis <- function(returns) {
# Kullanıcıdan giriş al
w_tsla <- as.numeric(readline("Enter weight for TSLA (e.g. 0.2): "))
w_aapl <- as.numeric(readline("Enter weight for AAPL (e.g. 0.3): "))
w_msft <- as.numeric(readline("Enter weight for MSFT (e.g. 0.5): "))
# Ağırlıkları vektör olarak birleştir
weights <- c(w_aapl, w_tsla, w_msft)
# Toplam 1 değilse uyar
if (round(sum(weights), 6) != 1) {
cat("❌ Error: The weights must sum to 1. You entered:", sum(weights), "\n")
return(NULL)
}
# Yıllık ortalama getiri ve kovaryans matrisi
mean_returns <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
# Portföy hesaplamaları
port_return <- sum(weights * mean_returns)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
sharpe_ratio <- port_return / port_volatility
# Sonuçları yazdır
cat("\n===== Custom Portfolio Analysis =====\n")
cat("Weights - AAPL:", w_aapl, "| TSLA:", w_tsla, "| MSFT:", w_msft, "\n")
cat("Annual Return:", round(port_return * 100, 2), "%\n")
cat("Annual Volatility:", round(port_volatility * 100, 2), "%\n")
cat("Sharpe Ratio:", round(sharpe_ratio, 2), "\n")
}
# Kullanım:
# run_portfolio_analysis(returns)
# Fonksiyon: kullanıcıdan girdi al, ağırlıkları kontrol et, analiz yap
run_portfolio_analysis <- function(returns) {
# Kullanıcıdan giriş al
w_tsla <- as.numeric(readline("Enter weight for TSLA (e.g. 0.2): "))
w_aapl <- as.numeric(readline("Enter weight for AAPL (e.g. 0.3): "))
w_msft <- as.numeric(readline("Enter weight for MSFT (e.g. 0.5): "))
# Ağırlıkları vektör olarak birleştir
weights <- c(w_aapl, w_tsla, w_msft)
# Toplam 1 değilse uyar
if (round(sum(weights), 6) != 1) {
cat("❌ Error: The weights must sum to 1. You entered:", sum(weights), "\n")
return(NULL)
}
# Yıllık ortalama getiri ve kovaryans matrisi
mean_returns <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
# Portföy hesaplamaları
port_return <- sum(weights * mean_returns)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
sharpe_ratio <- port_return / port_volatility
# Sonuçları yazdır
cat("\n===== Custom Portfolio Analysis =====\n")
cat("Weights - AAPL:", w_aapl, "| TSLA:", w_tsla, "| MSFT:", w_msft, "\n")
cat("Annual Return:", round(port_return * 100, 2), "%\n")
cat("Annual Volatility:", round(port_volatility * 100, 2), "%\n")
cat("Sharpe Ratio:", round(sharpe_ratio, 2), "\n")
}
# Kullanım:
# run_portfolio_analysis(returns)
6
# Fonksiyon: kullanıcıdan girdi al, ağırlıkları kontrol et, analiz yap
run_portfolio_analysis <- function(returns) {
# Kullanıcıdan giriş al
w_tsla <- as.numeric(readline("Enter weight for TSLA (e.g. 0.2): "))
w_aapl <- as.numeric(readline("Enter weight for AAPL (e.g. 0.3): "))
w_msft <- as.numeric(readline("Enter weight for MSFT (e.g. 0.5): "))
# Ağırlıkları vektör olarak birleştir
weights <- c(w_aapl, w_tsla, w_msft)
# Toplam 1 değilse uyar
if (round(sum(weights), 6) != 1) {
cat("❌ Error: The weights must sum to 1. You entered:", sum(weights), "\n")
return(NULL)
}
# Yıllık ortalama getiri ve kovaryans matrisi
mean_returns <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
# Portföy hesaplamaları
port_return <- sum(weights * mean_returns)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
sharpe_ratio <- port_return / port_volatility
# Sonuçları yazdır
cat("\n===== Custom Portfolio Analysis =====\n")
cat("Weights - AAPL:", w_aapl, "| TSLA:", w_tsla, "| MSFT:", w_msft, "\n")
cat("Annual Return:", round(port_return * 100, 2), "%\n")
cat("Annual Volatility:", round(port_volatility * 100, 2), "%\n")
cat("Sharpe Ratio:", round(sharpe_ratio, 2), "\n")
}
# Kullanım:
run_portfolio_analysis(returns)
# Fonksiyon: kullanıcıdan girdi al, ağırlıkları kontrol et, analiz yap
run_portfolio_analysis <- function(returns) {
# Kullanıcıdan giriş al
w_tsla <- as.numeric(readline("Enter weight for TSLA (e.g. 0.2): "))
w_aapl <- as.numeric(readline("Enter weight for AAPL (e.g. 0.3): "))
w_msft <- as.numeric(readline("Enter weight for MSFT (e.g. 0.5): "))
# Ağırlıkları vektör olarak birleştir
weights <- c(w_aapl, w_tsla, w_msft)
# Toplam 1 değilse uyar
if (round(sum(weights), 6) != 1) {
cat("❌ Error: The weights must sum to 1. You entered:", sum(weights), "\n")
return(NULL)
}
# Yıllık ortalama getiri ve kovaryans matrisi
mean_returns <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
# Portföy hesaplamaları
port_return <- sum(weights * mean_returns)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
sharpe_ratio <- port_return / port_volatility
# Sonuçları yazdır
cat("\n===== Custom Portfolio Analysis =====\n")
cat("Weights - AAPL:", w_aapl, "| TSLA:", w_tsla, "| MSFT:", w_msft, "\n")
cat("Annual Return:", round(port_return * 100, 2), "%\n")
cat("Annual Volatility:", round(port_volatility * 100, 2), "%\n")
cat("Sharpe Ratio:", round(sharpe_ratio, 2), "\n")
}
# Kullanım:
run_portfolio_analysis(returns)
# Fonksiyon: kullanıcıdan girdi al, ağırlıkları kontrol et, analiz yap
run_portfolio_analysis <- function(returns) {
# Kullanıcıdan giriş al
w_tsla <- as.numeric(readline("Enter weight for TSLA (e.g. 0.2): "))
w_aapl <- as.numeric(readline("Enter weight for AAPL (e.g. 0.3): "))
w_msft <- as.numeric(readline("Enter weight for MSFT (e.g. 0.5): "))
# Ağırlıkları vektör olarak birleştir
weights <- c(w_aapl, w_tsla, w_msft)
# Toplam 1 değilse uyar
if (round(sum(weights), 6) != 1) {
cat("❌ Error: The weights must sum to 1. You entered:", sum(weights), "\n")
return(NULL)
}
# Yıllık ortalama getiri ve kovaryans matrisi
mean_returns <- colMeans(returns) * 252
cov_matrix <- cov(returns) * 252
# Portföy hesaplamaları
port_return <- sum(weights * mean_returns)
port_variance <- t(weights) %*% cov_matrix %*% weights
port_volatility <- sqrt(port_variance)
sharpe_ratio <- port_return / port_volatility
# Sonuçları yazdır
cat("\n===== Custom Portfolio Analysis =====\n")
cat("Weights - AAPL:", w_aapl, "| TSLA:", w_tsla, "| MSFT:", w_msft, "\n")
cat("Annual Return:", round(port_return * 100, 2), "%\n")
cat("Annual Volatility:", round(port_volatility * 100, 2), "%\n")
cat("Sharpe Ratio:", round(sharpe_ratio, 2), "\n")
}
# Kullanım:
run_portfolio_analysis(returns)
