summarise(across(c(AAPL, MSFT, TSLA),
list(Mean = ~mean(.x, na.rm = TRUE),
SD = ~sd(.x, na.rm = TRUE))))
aapl_df <- data.frame(date = index(AAPL), coredata(AAPL)) |>
select(date, AAPL.Adjusted)
tsla_df <- data.frame(date = index(TSLA), coredata(TSLA)) |>
select(date, TSLA.Adjusted)
msft_df <- data.frame(date = index(MSFT), coredata(MSFT)) |>
select(date, MSFT.Adjusted)
ssmi_df <- data.frame(date = index(`SSMI`), coredata(`SSMI`)) |>
select(date, SSMI.Adjusted = `SSMI.Adjusted`)
merged_df <- aapl_df |>
full_join(tsla_df, by = "date") |>
full_join(msft_df, by = "date")
library(quantmod)
library(PerformanceAnalytics)
library(dplyr)
library(lubridate)
library(plotly)
library(corrplot)
#| warning: false
symbols <- c("AAPL", "MSFT", "TSLA", "^SSMI")
getSymbols(symbols, src = "yahoo", from = "2019-01-01", to = "2024-12-31")
aapl_df <- data.frame(date = index(AAPL), coredata(AAPL)) |>
select(date, AAPL.Adjusted)
tsla_df <- data.frame(date = index(TSLA), coredata(TSLA)) |>
select(date, TSLA.Adjusted)
msft_df <- data.frame(date = index(MSFT), coredata(MSFT)) |>
select(date, MSFT.Adjusted)
ssmi_df <- data.frame(date = index(`SSMI`), coredata(`SSMI`)) |>
select(date, SSMI.Adjusted = `SSMI.Adjusted`)
merged_df <- aapl_df |>
full_join(tsla_df, by = "date") |>
full_join(msft_df, by = "date")
create_stock_plot <- function(data, y_col, title_text, line_color) {
plot_ly(
data = data,
x = ~date,
y = as.formula(paste0("~", y_col)),
type = 'scatter',
mode = 'lines',
name = title_text,
line = list(color = line_color)
) %>%
layout(
title = paste0(title_text, " – Adjusted Closing Price"),
xaxis = list(title = "Date"),
yaxis = list(title = "Adjusted Close Price (USD)"),
showlegend = FALSE
)
}
p1 <- create_stock_plot(aapl_df, "AAPL.Adjusted", "Apple Inc. (AAPL)", "blue")
p2 <- create_stock_plot(tsla_df, "TSLA.Adjusted", "Tesla Inc. (TSLA)", "red")
p3 <- create_stock_plot(msft_df, "MSFT.Adjusted", "Microsoft Corp. (MSFT)", "green")
p4 <- create_stock_plot(ssmi_df, "SSMI.Adjusted", "Swiss Market Index (SSMI)", "black")
p1
p2
p3
p4
#| warning: false
returns_aapl <- dailyReturn(Ad(AAPL))
returns_msft <- dailyReturn(Ad(MSFT))
returns_tsla <- dailyReturn(Ad(TSLA))
returns_df <- merge(
"AAPL" = returns_aapl,
"MSFT" = returns_msft,
"TSLA" = returns_tsla,
)
#| warning: false
returns_aapl <- dailyReturn(Ad(AAPL))
returns_msft <- dailyReturn(Ad(MSFT))
returns_tsla <- dailyReturn(Ad(TSLA))
returns_df <- merge(
"AAPL" = returns_aapl,
"MSFT" = returns_msft,
"TSLA" = returns_tsla
)
returns_clean <- na.omit(returns_df)
plot_daily_return <- function(return_xts, ticker, line_color = "blue") {
plot_ly() %>%
add_lines(
x = ~index(return_xts),
y = ~coredata(return_xts),
name = ticker,
line = list(color = line_color)
) %>%
layout(
xaxis = list(title = "Date"),
yaxis = list(
title = sprintf("Daily Return of %s", ticker),
titlefont = list(size = 10)),
legend = list(x = 0.1, y = 0.9)
)
}
p1 <- plot_daily_return(returns_aapl, "AAPL", "green")
p2 <- plot_daily_return(returns_msft, "MSFT", "blue")
p3 <- plot_daily_return(returns_tsla, "TSLA", "red")
p1
p2
p3
returns_group <- as_tibble(coredata(returns_clean)) |>
mutate(Date = index(returns_clean)) |>
relocate(Date) |>
mutate(HalfYear = paste0(year(Date), " H", ifelse(month(Date) <= 6, 1, 2)))
grouped_data <- returns_group %>%
group_by(HalfYear) %>%
summarise(across(c(AAPL, MSFT, TSLA),
list(Mean = ~mean(.x, na.rm = TRUE),
SD = ~sd(.x, na.rm = TRUE))))
library(quantmod)
library(PerformanceAnalytics)
library(dplyr)
library(lubridate)
library(plotly)
library(corrplot)
#| warning: false
symbols <- c("AAPL", "MSFT", "TSLA", "^SSMI")
getSymbols(symbols, src = "yahoo", from = "2019-01-01", to = "2024-12-31")
aapl_df <- data.frame(date = index(AAPL), coredata(AAPL)) |>
select(date, AAPL.Adjusted)
tsla_df <- data.frame(date = index(TSLA), coredata(TSLA)) |>
select(date, TSLA.Adjusted)
msft_df <- data.frame(date = index(MSFT), coredata(MSFT)) |>
select(date, MSFT.Adjusted)
ssmi_df <- data.frame(date = index(`SSMI`), coredata(`SSMI`)) |>
select(date, SSMI.Adjusted = `SSMI.Adjusted`)
merged_df <- aapl_df |>
full_join(tsla_df, by = "date") |>
full_join(msft_df, by = "date")
create_stock_plot <- function(data, y_col, title_text, line_color) {
plot_ly(
data = data,
x = ~date,
y = as.formula(paste0("~", y_col)),
type = 'scatter',
mode = 'lines',
name = title_text,
line = list(color = line_color)
) %>%
layout(
title = paste0(title_text, " – Adjusted Closing Price"),
xaxis = list(title = "Date"),
yaxis = list(title = "Adjusted Close Price (USD)"),
showlegend = FALSE
)
}
p1 <- create_stock_plot(aapl_df, "AAPL.Adjusted", "Apple Inc. (AAPL)", "blue")
p2 <- create_stock_plot(tsla_df, "TSLA.Adjusted", "Tesla Inc. (TSLA)", "red")
p3 <- create_stock_plot(msft_df, "MSFT.Adjusted", "Microsoft Corp. (MSFT)", "green")
p4 <- create_stock_plot(ssmi_df, "SSMI.Adjusted", "Swiss Market Index (SSMI)", "black")
p1
p2
p3
p4
#| warning: false
returns_aapl <- dailyReturn(Ad(AAPL))
returns_msft <- dailyReturn(Ad(MSFT))
returns_tsla <- dailyReturn(Ad(TSLA))
returns_df <- merge(
"AAPL" = returns_aapl,
"MSFT" = returns_msft,
"TSLA" = returns_tsla
)
plot_daily_return <- function(return_xts, ticker, line_color = "blue") {
plot_ly() %>%
add_lines(
x = ~index(return_xts),
y = ~coredata(return_xts),
name = ticker,
line = list(color = line_color)
) %>%
layout(
xaxis = list(title = "Date"),
yaxis = list(
title = sprintf("Daily Return of %s", ticker),
titlefont = list(size = 10)),
legend = list(x = 0.1, y = 0.9)
)
}
p1 <- plot_daily_return(returns_aapl, "AAPL", "green")
p2 <- plot_daily_return(returns_msft, "MSFT", "blue")
p3 <- plot_daily_return(returns_tsla, "TSLA", "red")
p1
p2
p3
returns_group <- as_tibble(coredata(returns_clean)) |>
mutate(Date = index(returns_clean)) |>
relocate(Date) |>
mutate(HalfYear = paste0(year(Date), " H", ifelse(month(Date) <= 6, 1, 2)))
grouped_data <- returns_group %>%
group_by(HalfYear) %>%
summarise(across(c(AAPL, MSFT, TSLA),
list(Mean = ~mean(.x, na.rm = TRUE),
SD = ~sd(.x, na.rm = TRUE))))
returns_df <- data.frame(Date = index(returns_combined),
coredata(returns_combined))
returns_df <- returns_df %>%
mutate(HalfYear = paste0(year(Date), " H", ifelse(month(Date) <= 6, 1, 2)))
grouped_data <- returns_df %>%
group_by(HalfYear) %>%
summarise(across(c(AAPL, MSFT, TSLA),
list(Mean = ~mean(.x, na.rm = TRUE),
SD = ~sd(.x, na.rm = TRUE))))
grouped_data$HalfYear <- factor(grouped_data$HalfYear, levels = grouped_data$HalfYear)
event_labels <- data.frame(
HalfYear = c("2020 H1", "2021 H1", "2022 H1", "2023 H1"),
label = c("COVID", "Vaccine", "War", "AI")
)
event_lines <- lapply(event_labels$HalfYear, function(h) {
list(
type = "line",
x0 = h,
x1 = h,
y0 = 0,
y1 = 1,
xref = "x",
yref = "paper",
line = list(color = "red", dash = "dash", width = 0.5)
)
})
volatility_plot <- plot_ly(data = grouped_data) %>%
add_trace(x = ~HalfYear, y = ~AAPL_SD, name = "AAPL", type = 'scatter', mode = 'lines+markers') %>%
add_trace(x = ~HalfYear, y = ~MSFT_SD, name = "MSFT", type = 'scatter', mode = 'lines+markers') %>%
add_trace(x = ~HalfYear, y = ~TSLA_SD, name = "TSLA", type = 'scatter', mode = 'lines+markers') %>%
add_annotations(
data = event_labels,
x = ~HalfYear,
y = 0,
text = ~label,
showarrow = FALSE,
yanchor = "bottom",
font = list(color = "red", size = 10)
) %>%
layout(
title = "6-Month Volatility by Stock with Key Events",
xaxis = list(title = "Period (Half-Year)", tickangle = -45),
yaxis = list(title = "Volatility (Standard Deviation)"),
legend = list(title = list(text = "Stock")),
shapes = event_lines
)
volatility_plot
View(returns_df)
View(SSMI)
glimpse(merged_df)
View(merged_df)
View(SSMI)
View(ssmi_df)
glimpse(merged_df)
glimpse(ssmi_df)
glimpse(merged_df)
glimpse(ssmi_df)
merged_clean <- inner_join(merged_df, ssmi_df, by = "date")
View(merged_clean)
merged_clean <- inner_join(merged_df, ssmi_df, by = "date")
AAPL_return ~ SSMI_return
charts.PerformanceSummary(returns_df)
charts.PerformanceSummary(merged_clean)
cor(merged_clean)
merged_clean <- inner_join(merged_df, ssmi_df, by = "date")
glimpse(merged_clean)
returns_all <- merged_clean %>%
arrange(date) %>%
mutate(
AAPL_ret = (AAPL.Adjusted / lag(AAPL.Adjusted)) - 1,
TSLA_ret = (TSLA.Adjusted / lag(TSLA.Adjusted)) - 1,
MSFT_ret = (MSFT.Adjusted / lag(MSFT.Adjusted)) - 1,
SSMI_ret = (SSMI.Adjusted / lag(SSMI.Adjusted)) - 1
) %>%
na.omit()
View(returns)
View(returns_all)
returns_all <- merged_clean %>%
arrange(date) %>%
mutate(
AAPL_ret = (AAPL.Adjusted / lag(AAPL.Adjusted)) - 1,
TSLA_ret = (TSLA.Adjusted / lag(TSLA.Adjusted)) - 1,
MSFT_ret = (MSFT.Adjusted / lag(MSFT.Adjusted)) - 1,
SSMI_ret = (SSMI.Adjusted / lag(SSMI.Adjusted)) - 1
) %>%
na.omit()
returns_xts <- xts(
returns_df[, c("AAPL_ret", "TSLA_ret", "MSFT_ret", "SSMI_ret")],
order.by = returns_df$date
)
returns_all <- merged_clean %>%
arrange(date) %>%
mutate(
AAPL_ret = (AAPL.Adjusted / lag(AAPL.Adjusted)) - 1,
TSLA_ret = (TSLA.Adjusted / lag(TSLA.Adjusted)) - 1,
MSFT_ret = (MSFT.Adjusted / lag(MSFT.Adjusted)) - 1,
SSMI_ret = (SSMI.Adjusted / lag(SSMI.Adjusted)) - 1
) %>%
na.omit()
returns_xts <- xts(
returns_df[, c("AAPL_ret", "TSLA_ret", "MSFT_ret", "SSMI_ret")],
order.by = returns_df$date
)
returns_xts <- xts(
returns_all[, c("AAPL_ret", "TSLA_ret", "MSFT_ret",  "SSMI_ret")],
order.by = returns_df$date
)
returns_xts <- xts(
returns_all[, c("AAPL_ret", "TSLA_ret", "MSFT_ret",  "SSMI_ret")]
)
returns_xts <- xts(
returns_all[, c("AAPL_ret", "TSLA_ret", "MSFT_ret",  "SSMI_ret")]
)
returns_statistics %>%
summarise(
mean_AAPL = mean(AAPL_ret, na.rm = TRUE),
sd_AAPL   = sd(AAPL_ret, na.rm = TRUE),
mean_TSLA = mean(TSLA_ret, na.rm = TRUE),
sd_TSLA   = sd(TSLA_ret, na.rm = TRUE),
mean_MSFT = mean(MSFT_ret, na.rm = TRUE),
sd_MSFT   = sd(MSFT_ret, na.rm = TRUE),
mean_SSMI = mean(SSMI_ret, na.rm = TRUE),
sd_SSMI   = sd(SSMI_ret, na.rm = TRUE)
)
returns_all %>%
summarise(
mean_AAPL = mean(AAPL_ret, na.rm = TRUE),
sd_AAPL   = sd(AAPL_ret, na.rm = TRUE),
mean_TSLA = mean(TSLA_ret, na.rm = TRUE),
sd_TSLA   = sd(TSLA_ret, na.rm = TRUE),
mean_MSFT = mean(MSFT_ret, na.rm = TRUE),
sd_MSFT   = sd(MSFT_ret, na.rm = TRUE),
mean_SSMI = mean(SSMI_ret, na.rm = TRUE),
sd_SSMI   = sd(SSMI_ret, na.rm = TRUE)
)
returns_all %>%
select(AAPL_ret, TSLA_ret, MSFT_ret, SSMI_ret) %>%
summarise(across(everything(),
list(mean = ~mean(.x, na.rm = TRUE),
sd   = ~sd(.x, na.rm = TRUE)),
.names = "{.col}_{.fn}"))
returns_all %>%
select(AAPL_ret, TSLA_ret, MSFT_ret, SSMI_ret) %>%
pivot_longer(cols = everything(), names_to = "Stock", values_to = "Return") %>%
group_by(Stock) %>%
summarise(mean = mean(Return, na.rm = TRUE),
sd   = sd(Return, na.rm = TRUE)) %>%
mutate(sharpe = mean / sd)
returns_all %>%
select(AAPL_ret, TSLA_ret, MSFT_ret, SSMI_ret) %>%
summarise(across(everything(),
list(mean = ~mean(.x, na.rm = TRUE),
sd   = ~sd(.x, na.rm = TRUE)),
.names = "{.col}_{.fn}"))
returns_all %>%
select(AAPL_ret, TSLA_ret, MSFT_ret, SSMI_ret) %>%
pivot_longer(cols = everything(), names_to = "Stock", values_to = "Return") %>%
group_by(Stock) %>%
summarise(
Mean   = mean(Return, na.rm = TRUE),
SD     = sd(Return, na.rm = TRUE),
Sharpe = Mean / SD
)
library(tidyr)
returns_all %>%
select(AAPL_ret, TSLA_ret, MSFT_ret, SSMI_ret) %>%
pivot_longer(cols = everything(), names_to = "Stock", values_to = "Return") %>%
group_by(Stock) %>%
summarise(
Mean   = mean(Return, na.rm = TRUE),
SD     = sd(Return, na.rm = TRUE),
Sharpe = Mean / SD
)
AAPL_ret ~ SSMI_ret
TSLA_ret ~ SSMI_ret
MSFT_ret ~ SSMI_ret
lm_aapl <- lm(AAPL_ret ~ SSMI_ret, data = returns_all)
lm_tsla <- lm(TSLA_ret ~ SSMI_ret, data = returns_all)
lm_msft <- lm(MSFT_ret ~ SSMI_ret, data = returns_all)
lm_aapl <- lm(AAPL_ret ~ SSMI_ret, data = returns_all)
lm_tsla <- lm(TSLA_ret ~ SSMI_ret, data = returns_all)
lm_msft <- lm(MSFT_ret ~ SSMI_ret, data = returns_all)
beta_aapl <- coef(lm_aapl)["SSMI_ret"]
beta_tsla <- coef(lm_tsla)["SSMI_ret"]
beta_msft <- coef(lm_msft)["SSMI_ret"]
lm_aapl <- lm(AAPL_ret ~ SSMI_ret, data = returns_all)
lm_tsla <- lm(TSLA_ret ~ SSMI_ret, data = returns_all)
lm_msft <- lm(MSFT_ret ~ SSMI_ret, data = returns_all)
beta_aapl <- coef(lm_aapl)["SSMI_ret"]
beta_tsla <- coef(lm_tsla)["SSMI_ret"]
beta_msft <- coef(lm_msft)["SSMI_ret"]
beta_tbl <- tibble(
Stock = c("AAPL", "TSLA", "MSFT"),
Beta = c(beta_aapl, beta_tsla, beta_msft)
)
lm_aapl <- lm(AAPL_ret ~ SSMI_ret, data = returns_all)
lm_tsla <- lm(TSLA_ret ~ SSMI_ret, data = returns_all)
lm_msft <- lm(MSFT_ret ~ SSMI_ret, data = returns_all)
beta_aapl <- coef(lm_aapl)["SSMI_ret"]
beta_tsla <- coef(lm_tsla)["SSMI_ret"]
beta_msft <- coef(lm_msft)["SSMI_ret"]
beta_tbl <- tibble(
Stock = c("AAPL", "TSLA", "MSFT"),
Beta = c(beta_aapl, beta_tsla, beta_msft)
)
ggplot(beta_tbl, aes(x = Stock, y = Beta, fill = Stock)) +
geom_col(show.legend = FALSE) +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
labs(title = "Beta Coefficients w.r.t SSMI", y = "Beta") +
theme_minimal()
aapl_df <- returns_all %>% select(AAPL_ret, SSMI_ret) %>% drop_na()
tsla_df <- returns_all %>% select(TSLA_ret, SSMI_ret) %>% drop_na()
msft_df <- returns_all %>% select(MSFT_ret, SSMI_ret) %>% drop_na()
# Fonksiyon: Her hisse için model eğit, test et, performans ölç ve döndür
run_model <- function(data, target_name) {
split <- initial_split(data, prop = 0.8)
train_data <- training(split)
test_data <- testing(split)
rec <- recipe(as.formula(paste(target_name, "~ SSMI_ret")), data = train_data)
model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
wf <- workflow() %>%
add_model(model) %>%
add_recipe(rec)
fit_model <- fit(wf, data = train_data)
preds <- predict(fit_model, test_data) %>%
bind_cols(test_data)
metrics_tbl <- metrics(preds, truth = !!sym(target_name), estimate = .pred)
metrics_tbl$Stock <- gsub("_ret", "", target_name)
metrics_tbl
}
# Uygula: AAPL, TSLA ve MSFT için
results <- bind_rows(
run_model(aapl_df, "AAPL_ret"),
run_model(tsla_df, "TSLA_ret"),
run_model(msft_df, "MSFT_ret")
)
library(tidymodels)
install.packages("tidymodels")
library(tidymodels)
library(tidymodels)
library(ggplot2)
library(dplyr)
aapl_df <- returns_all %>% select(AAPL_ret, SSMI_ret) %>% drop_na()
tsla_df <- returns_all %>% select(TSLA_ret, SSMI_ret) %>% drop_na()
msft_df <- returns_all %>% select(MSFT_ret, SSMI_ret) %>% drop_na()
# Fonksiyon: Her hisse için model eğit, test et, performans ölç ve döndür
run_model <- function(data, target_name) {
split <- initial_split(data, prop = 0.8)
train_data <- training(split)
test_data <- testing(split)
rec <- recipe(as.formula(paste(target_name, "~ SSMI_ret")), data = train_data)
model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
wf <- workflow() %>%
add_model(model) %>%
add_recipe(rec)
fit_model <- fit(wf, data = train_data)
preds <- predict(fit_model, test_data) %>%
bind_cols(test_data)
metrics_tbl <- metrics(preds, truth = !!sym(target_name), estimate = .pred)
metrics_tbl$Stock <- gsub("_ret", "", target_name)
metrics_tbl
}
# Uygula: AAPL, TSLA ve MSFT için
results <- bind_rows(
run_model(aapl_df, "AAPL_ret"),
run_model(tsla_df, "TSLA_ret"),
run_model(msft_df, "MSFT_ret")
)
library(dplyr)
library(ggplot2)
library(Metrics)  # rmse(), mae()
model_aapl <- lm(AAPL_ret ~ SSMI_ret, data = returns_all)
summary(model_aapl)
# Lineer modelleri kur
model_aapl <- lm(AAPL_ret ~ SSMI_ret, data = returns_all)
model_tsla <- lm(TSLA_ret ~ SSMI_ret, data = returns_all)
model_msft <- lm(MSFT_ret ~ SSMI_ret, data = returns_all)
# Beta katsayılarını al
beta_tbl <- tibble(
Stock = c("AAPL", "TSLA", "MSFT"),
Beta = c(coef(model_aapl)["SSMI_ret"],
coef(model_tsla)["SSMI_ret"],
coef(model_msft)["SSMI_ret"])
)
# Lineer modelleri kur
model_aapl <- lm(AAPL_ret ~ SSMI_ret, data = returns_all)
model_tsla <- lm(TSLA_ret ~ SSMI_ret, data = returns_all)
model_msft <- lm(MSFT_ret ~ SSMI_ret, data = returns_all)
# Beta katsayılarını al
beta_tbl <- tibble(
Stock = c("AAPL", "TSLA", "MSFT"),
Beta = c(coef(model_aapl)["SSMI_ret"],
coef(model_tsla)["SSMI_ret"],
coef(model_msft)["SSMI_ret"])
)
library(ggplot2)
ggplot(beta_tbl, aes(x = Stock, y = Beta, fill = Stock)) +
geom_col(width = 0.6, show.legend = FALSE) +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
labs(title = "Beta Coefficients (vs. SSMI)",
y = "Beta (Slope vs. SSMI_ret)",
x = "Stock") +
theme_minimal()
# Lineer modelleri kur
model_aapl <- lm(AAPL_ret ~ SSMI_ret, data = returns_all)
model_tsla <- lm(TSLA_ret ~ SSMI_ret, data = returns_all)
model_msft <- lm(MSFT_ret ~ SSMI_ret, data = returns_all)
# Beta katsayılarını al
beta_tbl <- tibble(
Stock = c("AAPL", "TSLA", "MSFT"),
Beta = c(coef(model_aapl)["SSMI_ret"],
coef(model_tsla)["SSMI_ret"],
coef(model_msft)["SSMI_ret"])
)
